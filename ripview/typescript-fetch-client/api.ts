/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Trip Planner
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 10.2.1.42
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.transport.nsw.gov.au/v1/tp".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * This is the response data returned when performing an `add_info` request. 
 * @export
 * @interface AdditionalInfoResponse
 */
export interface AdditionalInfoResponse {
    /**
     * If an error has occurred, this element contains information about the error. 
     * @type {ApiErrorResponse}
     * @memberof AdditionalInfoResponse
     */
    error?: ApiErrorResponse;
    /**
     * 
     * @type {AdditionalInfoResponseInfos}
     * @memberof AdditionalInfoResponse
     */
    infos?: AdditionalInfoResponseInfos;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format
     * @type {string}
     * @memberof AdditionalInfoResponse
     */
    timestamp?: string;
    /**
     * The version of the API that provided the response. Note that if this value is different to above, then the returned data may be different than expected. You can set the expected version using the `version` request parameter. 
     * @type {string}
     * @memberof AdditionalInfoResponse
     */
    version?: string;
}

/**
 * This element describes a single route that is affected by a service alert.
 * @export
 * @interface AdditionalInfoResponseAffectedLine
 */
export interface AdditionalInfoResponseAffectedLine {
    /**
     * 
     * @type {AdditionalInfoResponseAffectedLineDestination}
     * @memberof AdditionalInfoResponseAffectedLine
     */
    destination?: AdditionalInfoResponseAffectedLineDestination;
    /**
     * This is the unique ID that identifies the given line.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedLine
     */
    id?: string;
    /**
     * This is the full name of the route.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedLine
     */
    name?: string;
    /**
     * This is the short name or code of the route.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedLine
     */
    number?: string;
    /**
     * This element contains additional properties about the route.
     * @type {RouteProduct}
     * @memberof AdditionalInfoResponseAffectedLine
     */
    product?: RouteProduct;
}

/**
 * This element describes the destination of trips fulfilled by the given line.
 * @export
 * @interface AdditionalInfoResponseAffectedLineDestination
 */
export interface AdditionalInfoResponseAffectedLineDestination {
    /**
     * This is the name of the destination.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedLineDestination
     */
    name?: string;
    /**
     * The type of the location the destination is.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedLineDestination
     */
    type?: AdditionalInfoResponseAffectedLineDestination.TypeEnum;
}

/**
 * @export
 * @namespace AdditionalInfoResponseAffectedLineDestination
 */
export namespace AdditionalInfoResponseAffectedLineDestination {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        GisPoint = <any> 'gisPoint',
        Unknown = <any> 'unknown'
    }
}

/**
 * This element describes a single stop that is affected by a service alert.
 * @export
 * @interface AdditionalInfoResponseAffectedStop
 */
export interface AdditionalInfoResponseAffectedStop {
    /**
     * This the unique ID of the stop that is affected. It is the same ID that is used elsewhere in the system, such as in `trip` or `stop_finder`. 
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedStop
     */
    id?: string;
    /**
     * This is the title of the affected stop.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedStop
     */
    name?: string;
    /**
     * If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located. 
     * @type {ParentLocation}
     * @memberof AdditionalInfoResponseAffectedStop
     */
    parent?: ParentLocation;
    /**
     * The type of the location that is affected.
     * @type {string}
     * @memberof AdditionalInfoResponseAffectedStop
     */
    type?: AdditionalInfoResponseAffectedStop.TypeEnum;
}

/**
 * @export
 * @namespace AdditionalInfoResponseAffectedStop
 */
export namespace AdditionalInfoResponseAffectedStop {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        GisPoint = <any> 'gisPoint',
        Unknown = <any> 'unknown'
    }
}

/**
 * Contains each of the returned service alerts. 
 * @export
 * @interface AdditionalInfoResponseInfos
 */
export interface AdditionalInfoResponseInfos {
    /**
     * 
     * @type {AdditionalInfoResponseInfosAffected}
     * @memberof AdditionalInfoResponseInfos
     */
    affected?: AdditionalInfoResponseInfosAffected;
    /**
     * This specifies the list of current service alerts based on the specified filters.
     * @type {Array<AdditionalInfoResponseMessage>}
     * @memberof AdditionalInfoResponseInfos
     */
    current?: Array<AdditionalInfoResponseMessage>;
    /**
     * This specifies the list of previous service alerts based on the specified filters.
     * @type {Array<AdditionalInfoResponseMessage>}
     * @memberof AdditionalInfoResponseInfos
     */
    historic?: Array<AdditionalInfoResponseMessage>;
}

/**
 * This specifies the list of affected stops and lines. It is an aggregate of each of the affected stops and lines listed in the alerts. 
 * @export
 * @interface AdditionalInfoResponseInfosAffected
 */
export interface AdditionalInfoResponseInfosAffected {
    /**
     * The specifies all of the lines that are listed as affected in the alert information.
     * @type {Array<AdditionalInfoResponseAffectedLine>}
     * @memberof AdditionalInfoResponseInfosAffected
     */
    lines?: Array<AdditionalInfoResponseAffectedLine>;
    /**
     * The specifies all of the stops that are listed as affected in the alert information.
     * @type {Array<AdditionalInfoResponseAffectedStop>}
     * @memberof AdditionalInfoResponseInfosAffected
     */
    stops?: Array<AdditionalInfoResponseAffectedStop>;
}

/**
 * This element describes a single service alert.
 * @export
 * @interface AdditionalInfoResponseMessage
 */
export interface AdditionalInfoResponseMessage {
    /**
     * 
     * @type {AdditionalInfoResponseMessageAffected}
     * @memberof AdditionalInfoResponseMessage
     */
    affected?: AdditionalInfoResponseMessageAffected;
    /**
     * This is the descriptive alert content. It may contain HTML tags and/or HTML entities. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    content?: string;
    /**
     * This is a unique identifier for this particular service alert. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    id?: string;
    /**
     * This value indicates how important the service alert is. A value of `high` or `veryHigh` likely indicates that the alert will correspond to an event that impacts the ability to travel for relevant users, while `low` or `veryLow` might be more of an informational message. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    priority?: AdditionalInfoResponseMessage.PriorityEnum;
    /**
     * 
     * @type {AdditionalInfoResponseMessageProperties}
     * @memberof AdditionalInfoResponseMessage
     */
    properties?: AdditionalInfoResponseMessageProperties;
    /**
     * This is short summary that can be used as a heading for the alert content. It may contain HTML tags and/or HTML entities. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    subtitle?: string;
    /**
     * This contains a number of timestamps that describe when the alert was created, and when the described alert actually takes place and/or is relevant. 
     * @type {AdditionalInfoResponseTimestamps}
     * @memberof AdditionalInfoResponseMessage
     */
    timestamps?: AdditionalInfoResponseTimestamps;
    /**
     * This indicates the category of the service alert. For example, if this value is `stopInfo`, then the alert is related to an issue affecting a stop. It is then likely that the affected lines would be those that stop at the affected stop.  * `routeInfo`: The alert is related to a specific route * `stopInfo`: The alert is related to a specific stop * `stopBlocking`: This alert is related to a stop closure * `lineInfo`: The alert is related to a specific journey * `bannerInfo`: The alert of high importance and potentially has a network-wide impact. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    type?: AdditionalInfoResponseMessage.TypeEnum;
    /**
     * This field contains a URL that contains additional information about the alert.
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    url?: string;
    /**
     * This field contains a title that can be used when displaying the `infoLinkURL` URL.
     * @type {string}
     * @memberof AdditionalInfoResponseMessage
     */
    urlText?: string;
    /**
     * This number indicates the version of this alert. Initially when it is created it has version `1`, but if it is then updated it will have a new `lastModification` value and the version will now be `2`. 
     * @type {number}
     * @memberof AdditionalInfoResponseMessage
     */
    version?: number;
}

/**
 * @export
 * @namespace AdditionalInfoResponseMessage
 */
export namespace AdditionalInfoResponseMessage {
    /**
     * @export
     * @enum {string}
     */
    export enum PriorityEnum {
        VeryLow = <any> 'veryLow',
        Low = <any> 'low',
        Normal = <any> 'normal',
        High = <any> 'high',
        VeryHigh = <any> 'veryHigh'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        RouteInfo = <any> 'routeInfo',
        StopInfo = <any> 'stopInfo',
        LineInfo = <any> 'lineInfo',
        BannerInfo = <any> 'bannerInfo',
        StopBlocking = <any> 'stopBlocking'
    }
}

/**
 * This contains details about the lines and stops that are impacted by the described alert. 
 * @export
 * @interface AdditionalInfoResponseMessageAffected
 */
export interface AdditionalInfoResponseMessageAffected {
    /**
     * This element contains a list of lines affected by this alert.
     * @type {Array<AdditionalInfoResponseAffectedLine>}
     * @memberof AdditionalInfoResponseMessageAffected
     */
    lines?: Array<AdditionalInfoResponseAffectedLine>;
    /**
     * This element contains a list of stops affected by this alert.
     * @type {Array<AdditionalInfoResponseAffectedStop>}
     * @memberof AdditionalInfoResponseMessageAffected
     */
    stops?: Array<AdditionalInfoResponseAffectedStop>;
}

/**
 * This element contains a additional information about the alert. 
 * @export
 * @interface AdditionalInfoResponseMessageProperties
 */
export interface AdditionalInfoResponseMessageProperties {
    /**
     * This field uniquely identifies which operator or organisation entered the alert into the system. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessageProperties
     */
    providerCode?: string;
    /**
     * This is a plaintext summary of the alert content, although note that it may contain HTML entities such as &nbsp;. 
     * @type {string}
     * @memberof AdditionalInfoResponseMessageProperties
     */
    smsText?: string;
    /**
     * 
     * @type {AdditionalInfoResponseMessagePropertiesSource}
     * @memberof AdditionalInfoResponseMessageProperties
     */
    source?: AdditionalInfoResponseMessagePropertiesSource;
}

/**
 * Contains information about who created this alert.
 * @export
 * @interface AdditionalInfoResponseMessagePropertiesSource
 */
export interface AdditionalInfoResponseMessagePropertiesSource {
    /**
     * A unique identifier for the creator of this alert.
     * @type {string}
     * @memberof AdditionalInfoResponseMessagePropertiesSource
     */
    id?: string;
    /**
     * The name of the creator of this alert.
     * @type {string}
     * @memberof AdditionalInfoResponseMessagePropertiesSource
     */
    name?: string;
    /**
     * The type of system of the alert creator.
     * @type {string}
     * @memberof AdditionalInfoResponseMessagePropertiesSource
     */
    type?: string;
}

/**
 * This element describes timestamps for a service alert.
 * @export
 * @interface AdditionalInfoResponseTimestamps
 */
export interface AdditionalInfoResponseTimestamps {
    /**
     * 
     * @type {AdditionalInfoResponseTimestampsAvailability}
     * @memberof AdditionalInfoResponseTimestamps
     */
    availability?: AdditionalInfoResponseTimestampsAvailability;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates when the alert was created.
     * @type {string}
     * @memberof AdditionalInfoResponseTimestamps
     */
    creation?: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates when the alert was last modified.
     * @type {string}
     * @memberof AdditionalInfoResponseTimestamps
     */
    lastModification?: string;
    /**
     * This describes when the incident is actually occurring. 
     * @type {Array<AdditionalInfoResponseTimestampsValidity>}
     * @memberof AdditionalInfoResponseTimestamps
     */
    validity?: Array<AdditionalInfoResponseTimestampsValidity>;
}

/**
 * This describes when the alert should published. Note that this is used as guidance only and your own needs may vary. 
 * @export
 * @interface AdditionalInfoResponseTimestampsAvailability
 */
export interface AdditionalInfoResponseTimestampsAvailability {
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format
     * @type {string}
     * @memberof AdditionalInfoResponseTimestampsAvailability
     */
    from?: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format
     * @type {string}
     * @memberof AdditionalInfoResponseTimestampsAvailability
     */
    to?: string;
}

/**
 * 
 * @export
 * @interface AdditionalInfoResponseTimestampsValidity
 */
export interface AdditionalInfoResponseTimestampsValidity {
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the starting date and time of this date range.
     * @type {string}
     * @memberof AdditionalInfoResponseTimestampsValidity
     */
    from?: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the ending date and time of this date range.
     * @type {string}
     * @memberof AdditionalInfoResponseTimestampsValidity
     */
    to?: string;
}

/**
 * This element contains information about an error that may have occurred when handling an API request. 
 * @export
 * @interface ApiErrorResponse
 */
export interface ApiErrorResponse {
    /**
     * Describes the error that went wrong
     * @type {string}
     * @memberof ApiErrorResponse
     */
    message?: string;
    /**
     * 
     * @type {ApiErrorResponseVersions}
     * @memberof ApiErrorResponse
     */
    versions?: ApiErrorResponseVersions;
}

/**
 * If the error was related to the API version, this element contains version information. 
 * @export
 * @interface ApiErrorResponseVersions
 */
export interface ApiErrorResponseVersions {
    /**
     * The version of the API handling the request
     * @type {string}
     * @memberof ApiErrorResponseVersions
     */
    controller?: string;
    /**
     * The maximum version number that can be requested in the `version` request parameter.
     * @type {string}
     * @memberof ApiErrorResponseVersions
     */
    interfaceMax?: string;
    /**
     * The minimum version number that can be requested in the `version` request parameter.
     * @type {string}
     * @memberof ApiErrorResponseVersions
     */
    interfaceMin?: string;
}

/**
 * This is the response data returned when performing an `coord` request. 
 * @export
 * @interface CoordRequestResponse
 */
export interface CoordRequestResponse {
    /**
     * If an error has occurred, this element contains information about the error. 
     * @type {ApiErrorResponse}
     * @memberof CoordRequestResponse
     */
    error?: ApiErrorResponse;
    /**
     * This contains a list of all of the stops, reload points and places of interest found based on the given request. 
     * @type {Array<CoordRequestResponseLocation>}
     * @memberof CoordRequestResponse
     */
    locations?: Array<CoordRequestResponseLocation>;
    /**
     * The version of the API that provided the response. Note that if this value is different to above, then the returned data may be different than expected. You can set the expected version using the `version` request parameter. 
     * @type {string}
     * @memberof CoordRequestResponse
     */
    version?: string;
}

/**
 * Describes a single point that is returned based on the given request. 
 * @export
 * @interface CoordRequestResponseLocation
 */
export interface CoordRequestResponseLocation {
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     * @type {Array<number>}
     * @memberof CoordRequestResponseLocation
     */
    coord?: Array<number>;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     * @type {string}
     * @memberof CoordRequestResponseLocation
     */
    disassembledName?: string;
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `stop_finder`, or can be used as the origin or destination in an `trip` request. The format of a location ID differs greatly, depending on the type of location it is. 
     * @type {string}
     * @memberof CoordRequestResponseLocation
     */
    id?: string;
    /**
     * Contains a human-readable title for the location. 
     * @type {string}
     * @memberof CoordRequestResponseLocation
     */
    name?: string;
    /**
     * If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located. 
     * @type {ParentLocation}
     * @memberof CoordRequestResponseLocation
     */
    parent?: ParentLocation;
    /**
     * 
     * @type {CoordRequestResponseLocationProperties}
     * @memberof CoordRequestResponseLocation
     */
    properties?: CoordRequestResponseLocationProperties;
    /**
     * This specifies the type of the returned item. If you search with a type of `GIS_POINT`, a returned item has a type of `gisPoint`. 
     * @type {string}
     * @memberof CoordRequestResponseLocation
     */
    type?: CoordRequestResponseLocation.TypeEnum;
}

/**
 * @export
 * @namespace CoordRequestResponseLocation
 */
export namespace CoordRequestResponseLocation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        GisPoint = <any> 'gisPoint',
        Unknown = <any> 'unknown'
    }
}

/**
 * This data contains additional information about each location, mainly related to how it can be categorised or displayed on a map. 
 * @export
 * @interface CoordRequestResponseLocationProperties
 */
export interface CoordRequestResponseLocationProperties {
    /**
     * This value indicates how the given point can be represented on a map. For example, if you have different icons for different categories, use this to determine which icon to use.  * `CityL` * `CityM` * `CityS` * `CityXL` * `CityXS` * `Generic7` * `Generic8` * `Generic9` * `Generic20` * `PoiAirportPublic` * `PoiCemetry` * `PoiCulture` * `PoiGastro` * `PoiGeneral` * `PoiGovernment` * `PoiHistoric` * `PoiHotel` * `PoiMedicine` * `PoiOthers` * `PoiPark` * `PoiParking` * `PoiPublicBuilding` * `PoiReligion` * `PoiSchool` * `PoiSport` * `PoiSwimming` * `PoiTrafficSpecial` 
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    GIS_DRAW_CLASS?: string;
    /**
     * This value typically either empty or `POINT`.
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    GIS_DRAW_CLASS_TYPE?: CoordRequestResponseLocationProperties.GISDRAWCLASSTYPEEnum;
    /**
     * This data is not used at this time.
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    GIS_NIVEAU?: string;
    /**
     * This value indicates how the given point can be represented on a map. For example, if you have different icons for different categories, use this to determine which icon to use.  * `PoiCemetry` * `PoiCulture` * `PoiGastro` * `PoiGeneral` * `PoiGovernment` * `PoiHotel` * `PoiMedicine` * `PoiOthers` * `PoiPark` * `PoiParking` * `PoiPublicBuilding` * `PoiReligion` * `PoiSchool` * `PoiSport` * `PoiSwimming` * `PoiTrafficSpecial` 
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    POI_DRAW_CLASS?: string;
    /**
     * This value typically either empty or `POINT`.
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    POI_DRAW_CLASS_TYPE?: CoordRequestResponseLocationProperties.POIDRAWCLASSTYPEEnum;
    /**
     * This field contains a human-readable description of the category to which this location belongs. See the description for `POI_HIERARCHY_KEY` for example values that correspond to the given keys. 
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    pOIHIERARCHY0?: string;
    /**
     * This field contains a constant value for the category to which this category belongs.  * `A`: Accommodation * `B`: Caravan and Camping * `C`: Cemetary * `D`: Education * `E`: Emergency or Defence * `F`: Entertainment * `G`: Gardens or Parklands * `H`: Golf Clubs * `I`: Historical or Religious * `K`: Local Government * `L`: Medical and Care * `O`: Sporting or Recreation * `Q`: Tourist Attraction * `R`: Transport * `S`: Utilities and Facilities * `T`: Others 
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    POI_HIERARCHY_KEY?: string;
    /**
     * This is the distance in metres to this location from the search location.
     * @type {string}
     * @memberof CoordRequestResponseLocationProperties
     */
    distance?: string;
}

/**
 * @export
 * @namespace CoordRequestResponseLocationProperties
 */
export namespace CoordRequestResponseLocationProperties {
    /**
     * @export
     * @enum {string}
     */
    export enum GISDRAWCLASSTYPEEnum {
        POINT = <any> 'POINT'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum POIDRAWCLASSTYPEEnum {
        POINT = <any> 'POINT'
    }
}

/**
 * This is the response data returned when performing an `departure_mon` request. 
 * @export
 * @interface DepartureMonitorResponse
 */
export interface DepartureMonitorResponse {
    /**
     * If an error has occurred, this element contains information about the error. 
     * @type {ApiErrorResponse}
     * @memberof DepartureMonitorResponse
     */
    error?: ApiErrorResponse;
    /**
     * Contains a list of stops that were matched based on the supplied `type_dm` and `name_dm` request values. There must be exactly one location present for the `stopEvents` response data to be populated. Additionally, the `mode` request value must be set to `direct`. 
     * @type {Array<StopFinderLocation>}
     * @memberof DepartureMonitorResponse
     */
    locations?: Array<StopFinderLocation>;
    /**
     * Contains a list of departures/arrivals for the stop included in the `location` property of the response. 
     * @type {Array<DepartureMonitorResponseStopEvent>}
     * @memberof DepartureMonitorResponse
     */
    stopEvents?: Array<DepartureMonitorResponseStopEvent>;
    /**
     * The version of the API that provided the response. Note that if this value is different to above, then the returned data may be different than expected. You can set the expected version using the `version` request parameter. 
     * @type {string}
     * @memberof DepartureMonitorResponse
     */
    version?: string;
}

/**
 * Corresponds to a single departure or arrival for the given stop. 
 * @export
 * @interface DepartureMonitorResponseStopEvent
 */
export interface DepartureMonitorResponseStopEvent {
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format
     * @type {string}
     * @memberof DepartureMonitorResponseStopEvent
     */
    departureTimePlanned?: string;
    /**
     * Contains a number of service alert messages relating to this stop event. Information returned here is also available using the `add_info` API endpoint. 
     * @type {Array<TripRequestResponseJourneyLegStopInfo>}
     * @memberof DepartureMonitorResponseStopEvent
     */
    infos?: Array<TripRequestResponseJourneyLegStopInfo>;
    /**
     * This element contains a single location associated with this stop time. 
     * @type {StopFinderLocation}
     * @memberof DepartureMonitorResponseStopEvent
     */
    location?: StopFinderLocation;
    /**
     * This element describes the mode of transportation and/or the specific route or trip used for this stop time. 
     * @type {TripTransportation}
     * @memberof DepartureMonitorResponseStopEvent
     */
    transportation?: TripTransportation;
}

/**
 * This element contains information about a HTTP error that occurred. 
 * @export
 * @interface HttpErrorResponse
 */
export interface HttpErrorResponse {
    /**
     * The date and time that the error occurred.
     * @type {string}
     * @memberof HttpErrorResponse
     */
    errorDateTime?: string;
    /**
     * A detailed message about the error.
     * @type {string}
     * @memberof HttpErrorResponse
     */
    message?: string;
    /**
     * The HTTP request method used for the current request.
     * @type {string}
     * @memberof HttpErrorResponse
     */
    requestedMethod?: string;
    /**
     * The URL for the current request.
     * @type {string}
     * @memberof HttpErrorResponse
     */
    requestedUrl?: string;
    /**
     * A unique identifier for the current request.
     * @type {string}
     * @memberof HttpErrorResponse
     */
    transactionId?: string;
}

/**
 * Describes a parent location. Locations are hierarchical, mean a location has a parent, and a location may have any number of child locations. A parent location is often included with locations, which can help traverse the location tree. 
 * @export
 * @interface ParentLocation
 */
export interface ParentLocation {
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     * @type {string}
     * @memberof ParentLocation
     */
    disassembledName?: string;
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `stop_finder`, or can be used as the origin or destination in an `trip` request. The format of a location ID differs greatly, depending on the type of location it is. 
     * @type {string}
     * @memberof ParentLocation
     */
    id?: string;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     * @type {string}
     * @memberof ParentLocation
     */
    name?: string;
    /**
     * In some cases, a parent location will also contain its parent (in other words, the grandparent of the initial location) 
     * @type {ParentLocation}
     * @memberof ParentLocation
     */
    parent?: ParentLocation;
    /**
     * This is the type of location being returned. It may represent a stop or platform that a public transport service physically stops at for passenger boarding, or it may represent somebody's house. A value of `unknown` likely indicates bad data coming from the server. If a location is returned with this type, you can safely ignore it. 
     * @type {string}
     * @memberof ParentLocation
     */
    type?: ParentLocation.TypeEnum;
}

/**
 * @export
 * @namespace ParentLocation
 */
export namespace ParentLocation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        Unknown = <any> 'unknown'
    }
}

/**
 * This element contains additional properties about the route.
 * @export
 * @interface RouteProduct
 */
export interface RouteProduct {
    /**
     * This field indicates the type of the route, using the same values as elsewhere in this API.  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus * `99`: Walking * `100`: Walking (Footpath) * `101`: Bicycle * `102`: Take Bicycle On Public Transport * `103`: Kiss & Ride * `104`: Park & Ride * `105`: Taxi * `106`: Car 
     * @type {number}
     * @memberof RouteProduct
     */
    _class?: number;
    /**
     * This field is used by to determine which icon to use when displaying this affected route. It will typically match up with the `class` value. 
     * @type {number}
     * @memberof RouteProduct
     */
    iconId?: number;
    /**
     * Name of the product
     * @type {string}
     * @memberof RouteProduct
     */
    name?: string;
}

/**
 * An assigned stop is a location that public transport stops at. Locations / places of interest that aren't stops may have one or more stops \"assigned\" to it as being \"the stop(s) you would use if you were in this location\". 
 * @export
 * @interface StopFinderAssignedStop
 */
export interface StopFinderAssignedStop {
    /**
     * This is the mode of transport that is used to connect to this stop. The following values are available:  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus * `97`: Remain On-Board * `99`: Walking * `100`: Walking (Footpath) * `101`: Bicycle * `102`: Take Bicycle On Public Transport * `103`: Kiss & Ride * `104`: Park & Ride * `105`: Taxi * `106`: Car 
     * @type {number}
     * @memberof StopFinderAssignedStop
     */
    connectingMode?: number;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     * @type {Array<number>}
     * @memberof StopFinderAssignedStop
     */
    coord?: Array<number>;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     * @type {string}
     * @memberof StopFinderAssignedStop
     */
    disassembledName?: string;
    /**
     * This is the distance in metres to this stop from the location to which it is assigned.
     * @type {number}
     * @memberof StopFinderAssignedStop
     */
    distance?: number;
    /**
     * This is the number of minutes it would take to reach this stop from the location to which it is assigned.
     * @type {number}
     * @memberof StopFinderAssignedStop
     */
    duration?: number;
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `stop_finder`, or can be used as the origin or destination in an `trip` request. The format of a location ID differs greatly, depending on the type of location it is. 
     * @type {string}
     * @memberof StopFinderAssignedStop
     */
    id?: string;
    /**
     * This is included only if the `type` value is set to `stop`. Contains a list of modes of transport that service this stop. This can be useful for showing relevant wayfinding icons when presenting users with a list of matching stops to choose from.  The following values may be present:  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus 
     * @type {Array<number>}
     * @memberof StopFinderAssignedStop
     */
    modes?: Array<number>;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     * @type {string}
     * @memberof StopFinderAssignedStop
     */
    name?: string;
    /**
     * If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located. 
     * @type {ParentLocation}
     * @memberof StopFinderAssignedStop
     */
    parent?: ParentLocation;
    /**
     * A value of `unknown` likely indicates bad data. If a location is returned with this type, you can safely ignore it. 
     * @type {string}
     * @memberof StopFinderAssignedStop
     */
    type?: StopFinderAssignedStop.TypeEnum;
}

/**
 * @export
 * @namespace StopFinderAssignedStop
 */
export namespace StopFinderAssignedStop {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        Unknown = <any> 'unknown'
    }
}

/**
 * This element describes a single location that is returned in an `stop_finder` request.
 * @export
 * @interface StopFinderLocation
 */
export interface StopFinderLocation {
    /**
     * This is a list of stops that are assigned to this location. This means if you're in the current location and want to catch public transport, these assigned stops are directly available to you. 
     * @type {Array<StopFinderAssignedStop>}
     * @memberof StopFinderLocation
     */
    assignedStops?: Array<StopFinderAssignedStop>;
    /**
     * This is the number of the property, included only if the `type` value is set to `singlehouse`. Note that it is a string, as it may include non-numeric characters. 
     * @type {string}
     * @memberof StopFinderLocation
     */
    buildingNumber?: string;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     * @type {Array<number>}
     * @memberof StopFinderLocation
     */
    coord?: Array<number>;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     * @type {string}
     * @memberof StopFinderLocation
     */
    disassembledName?: string;
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `stop_finder`, or can be used as the origin or destination in an `trip` request. The format of a location ID differs greatly, depending on the type of location it is. 
     * @type {string}
     * @memberof StopFinderLocation
     */
    id?: string;
    /**
     * Indicates whether or not this is the best match out of all the returned locations.
     * @type {boolean}
     * @memberof StopFinderLocation
     */
    isBest?: boolean;
    /**
     * This determines whether the id property is a global stop id or not 
     * @type {boolean}
     * @memberof StopFinderLocation
     */
    isGlobalId?: boolean;
    /**
     * This value indicates how well the returned stop matches the search query. A higher number indicates a better match.
     * @type {number}
     * @memberof StopFinderLocation
     */
    matchQuality?: number;
    /**
     * This is included only if the `type` value is set to `stop`. Contains a list of modes of transport that service this stop. This can be useful for showing relevant wayfinding icons when presenting users with a list of matching stops to choose from.  The following values may be present:  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus 
     * @type {Array<number>}
     * @memberof StopFinderLocation
     */
    modes?: Array<number>;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     * @type {string}
     * @memberof StopFinderLocation
     */
    name?: string;
    /**
     * If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located. 
     * @type {ParentLocation}
     * @memberof StopFinderLocation
     */
    parent?: ParentLocation;
    /**
     * This is included only if the `type` value is set to `street` or `singlehouse`.
     * @type {string}
     * @memberof StopFinderLocation
     */
    streetName?: string;
    /**
     * This is the type of location being returned. It may represent a stop or platform that a public transport service physically stops at for passenger boarding, or it may represent somebody's house. A value of `unknown` likely indicates bad data coming from the server. If a location is returned with this type, you can safely ignore it. 
     * @type {string}
     * @memberof StopFinderLocation
     */
    type?: StopFinderLocation.TypeEnum;
}

/**
 * @export
 * @namespace StopFinderLocation
 */
export namespace StopFinderLocation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        Address = <any> 'address',
        Unknown = <any> 'unknown'
    }
}

/**
 * This element contains the response for an `stop_finder` request.
 * @export
 * @interface StopFinderResponse
 */
export interface StopFinderResponse {
    /**
     * If an error has occurred, this element contains information about the error. 
     * @type {ApiErrorResponse}
     * @memberof StopFinderResponse
     */
    error?: ApiErrorResponse;
    /**
     * An array of all locations that were found using the specified search input. To display the results in a way that makes sense to the end user, you can sort this list by `matchQuality`. Alternatively, you can group the results by their type and/or sort them alphabetically. 
     * @type {Array<StopFinderLocation>}
     * @memberof StopFinderResponse
     */
    locations?: Array<StopFinderLocation>;
    /**
     * The version of the API that provided the response. Note that if this value is different to above, then the returned data may be different than expected. You can set the expected version using the `version` request parameter. 
     * @type {string}
     * @memberof StopFinderResponse
     */
    version?: string;
}

/**
 * This element contains the response from an `trip` request.
 * @export
 * @interface TripRequestResponse
 */
export interface TripRequestResponse {
    /**
     * If an error has occurred, this element contains information about the error. 
     * @type {ApiErrorResponse}
     * @memberof TripRequestResponse
     */
    error?: ApiErrorResponse;
    /**
     * Contains zero or more journeys found based on the input parameters.
     * @type {Array<TripRequestResponseJourney>}
     * @memberof TripRequestResponse
     */
    journeys?: Array<TripRequestResponseJourney>;
    /**
     * 
     * @type {TripRequestResponseSystemMessages}
     * @memberof TripRequestResponse
     */
    systemMessages?: TripRequestResponseSystemMessages;
    /**
     * The version of the API that provided the response. Note that if this value is different to above, then the returned data may be different than expected. You can set the expected version using the `version` request parameter. 
     * @type {string}
     * @memberof TripRequestResponse
     */
    version?: string;
}

/**
 * This element describes a single journey returned by `trip`
 * @export
 * @interface TripRequestResponseJourney
 */
export interface TripRequestResponseJourney {
    /**
     * XXX
     * @type {boolean}
     * @memberof TripRequestResponseJourney
     */
    isAdditional?: boolean;
    /**
     * This element contains one or more legs that constitute the trip.
     * @type {Array<TripRequestResponseJourneyLeg>}
     * @memberof TripRequestResponseJourney
     */
    legs?: Array<TripRequestResponseJourneyLeg>;
    /**
     * XXX
     * @type {number}
     * @memberof TripRequestResponseJourney
     */
    rating?: number;
}

/**
 * Not currently used.
 * @export
 * @interface TripRequestResponseJourneyFareZone
 */
export interface TripRequestResponseJourneyFareZone {
    /**
     * Not currently used.
     * @type {number}
     * @memberof TripRequestResponseJourneyFareZone
     */
    fromLeg?: number;
    /**
     * Not currently used.
     * @type {string}
     * @memberof TripRequestResponseJourneyFareZone
     */
    net?: string;
    /**
     * Not currently used.
     * @type {string}
     * @memberof TripRequestResponseJourneyFareZone
     */
    neutralZone?: string;
    /**
     * Not currently used.
     * @type {number}
     * @memberof TripRequestResponseJourneyFareZone
     */
    toLeg?: number;
}

/**
 * This element describes a single leg of a journey. A journey is made up of one or more legs.
 * @export
 * @interface TripRequestResponseJourneyLeg
 */
export interface TripRequestResponseJourneyLeg {
    /**
     * This elements contains a list of coordinates that this journey leg follows. A line between can be plotted between these coordinates in order when representing the journey on a map in order to show where the vehicle travels (or for a walking leg, the path to be walked). 
     * @type {Array<Array<number>>}
     * @memberof TripRequestResponseJourneyLeg
     */
    coords?: Array<Array<number>>;
    /**
     * This is the finishing location of the leg.
     * @type {TripRequestResponseJourneyLegStop}
     * @memberof TripRequestResponseJourneyLeg
     */
    destination?: TripRequestResponseJourneyLegStop;
    /**
     * The approximate distance in metres travelled to complete this journey leg.
     * @type {number}
     * @memberof TripRequestResponseJourneyLeg
     */
    distance?: number;
    /**
     * The approximate amount of time in seconds required to complete this journey leg.
     * @type {number}
     * @memberof TripRequestResponseJourneyLeg
     */
    duration?: number;
    /**
     * If the leg corresponds to a walking leg, this element contains walking directions. 
     * @type {Array<TripRequestResponseJourneyLegStopFootpathInfo>}
     * @memberof TripRequestResponseJourneyLeg
     */
    footPathInfo?: Array<TripRequestResponseJourneyLegStopFootpathInfo>;
    /**
     * Contains a number of additional informational messages that may be useful for travellers.
     * @type {Array<TripRequestResponseJourneyLegHints>}
     * @memberof TripRequestResponseJourneyLeg
     */
    hints?: Array<TripRequestResponseJourneyLegHints>;
    /**
     * Contains a number of service alert messages relating to this journey leg. Information returned here is also available using the `add_info` API endpoint. 
     * @type {Array<TripRequestResponseJourneyLegStopInfo>}
     * @memberof TripRequestResponseJourneyLeg
     */
    infos?: Array<TripRequestResponseJourneyLegStopInfo>;
    /**
     * Contains information for how to interchange between the end of one leg to the next journey leg. 
     * @type {TripRequestResponseJourneyLegInterchange}
     * @memberof TripRequestResponseJourneyLeg
     */
    interchange?: TripRequestResponseJourneyLegInterchange;
    /**
     * This indicates whether or not real-time data has been used to calculate the departure/arrival timestamps
     * @type {boolean}
     * @memberof TripRequestResponseJourneyLeg
     */
    isRealtimeControlled?: boolean;
    /**
     * This is the starting location of the leg.
     * @type {TripRequestResponseJourneyLegStop}
     * @memberof TripRequestResponseJourneyLeg
     */
    origin?: TripRequestResponseJourneyLegStop;
    /**
     * Contains walking information for completing this journey leg.
     * @type {Array<TripRequestResponseJourneyLegPathDescription>}
     * @memberof TripRequestResponseJourneyLeg
     */
    pathDescriptions?: Array<TripRequestResponseJourneyLegPathDescription>;
    /**
     * 
     * @type {TripRequestResponseJourneyLegProperties}
     * @memberof TripRequestResponseJourneyLeg
     */
    properties?: TripRequestResponseJourneyLegProperties;
    /**
     * This is a list of all stops that are made for this leg. It is sorted in order of its stopping sequence. If the leg is a walking leg between two stops, then this will contain these two stops in order. 
     * @type {Array<TripRequestResponseJourneyLegStop>}
     * @memberof TripRequestResponseJourneyLeg
     */
    stopSequence?: Array<TripRequestResponseJourneyLegStop>;
    /**
     * This element contains information about the mode of transport and/or route used to complete this journey leg. 
     * @type {TripTransportation}
     * @memberof TripRequestResponseJourneyLeg
     */
    transportation?: TripTransportation;
}

/**
 * 
 * @export
 * @interface TripRequestResponseJourneyLegHints
 */
export interface TripRequestResponseJourneyLegHints {
    /**
     * Contains additional information that may be useful for travellers. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegHints
     */
    infoText?: string;
}

/**
 * This object describes walking directions for interchanging between two consecutive legs. This occurs in the case when there's only a small distance between two transit legs, not enough to constitute a standalone walking leg. 
 * @export
 * @interface TripRequestResponseJourneyLegInterchange
 */
export interface TripRequestResponseJourneyLegInterchange {
    /**
     * This is a list of coordinates that makes up the path of the interchange. 
     * @type {Array<Array<number>>}
     * @memberof TripRequestResponseJourneyLegInterchange
     */
    coords?: Array<Array<number>>;
    /**
     * This is a description of the interchange. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegInterchange
     */
    desc?: string;
    /**
     * This indicates the mode of travel for the interchange. Both `99` and `100` indicate walking. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegInterchange
     */
    type?: number;
}

/**
 * Contains a single instruction for completing a walking leg associated with a journey leg.
 * @export
 * @interface TripRequestResponseJourneyLegPathDescription
 */
export interface TripRequestResponseJourneyLegPathDescription {
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. This is the location where the instruction occurs. 
     * @type {Array<number>}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    coord?: Array<number>;
    /**
     * This is the cumulative distance travelled in metres at the point of this step.
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    cumDistance?: number;
    /**
     * This is the cumulative duration in seconds at the point of this step. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    cumDuration?: number;
    /**
     * This is the distance travelled in this step in metres. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    distance?: number;
    /**
     * This is the distance travelled downward in this step in metres 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    distanceDown?: number;
    /**
     * This is the distance travelled upward in this step in metres 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    distanceUp?: number;
    /**
     * This is the duration of this step in seconds. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    duration?: number;
    /**
     * This field enables you to retrieve multiple coordinates from the `coords` property, starting from this index. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    fromCoordsIndex?: number;
    /**
     * Indicates what you have to do (in addition the turn `turnDirection`) to execute this step of the path description. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    manoeuvre?: TripRequestResponseJourneyLegPathDescription.ManoeuvreEnum;
    /**
     * This is a specific description of what to do. In some cases, this information is required in addition to the other properties provided in this step. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    name?: string;
    /**
     * The direction in degrees (0-359) of the skyDirection
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    skyDirection?: number;
    /**
     * This field enables you to retrieve multiple coordinates from the `coords` property, ending at this index. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    toCoordsIndex?: number;
    /**
     * Indicates the way you need to turn to execute this step of the path description. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegPathDescription
     */
    turnDirection?: TripRequestResponseJourneyLegPathDescription.TurnDirectionEnum;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegPathDescription
 */
export namespace TripRequestResponseJourneyLegPathDescription {
    /**
     * @export
     * @enum {string}
     */
    export enum ManoeuvreEnum {
        LEAVE = <any> 'LEAVE',
        KEEP = <any> 'KEEP',
        TURN = <any> 'TURN',
        ENTER = <any> 'ENTER',
        CONTINUE = <any> 'CONTINUE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TurnDirectionEnum {
        UNKNOWN = <any> 'UNKNOWN',
        STRAIGHT = <any> 'STRAIGHT',
        RIGHT = <any> 'RIGHT',
        LEFT = <any> 'LEFT',
        SLIGHTRIGHT = <any> 'SLIGHT_RIGHT',
        SLIGHTLEFT = <any> 'SLIGHT_LEFT',
        SHARPLEFT = <any> 'SHARP_LEFT',
        SHARPRIGHT = <any> 'SHARP_RIGHT'
    }
}

/**
 * Contains additional information about this journey leg, such as wheelchair accessibility information. 
 * @export
 * @interface TripRequestResponseJourneyLegProperties
 */
export interface TripRequestResponseJourneyLegProperties {
    /**
     * XXX
     * @type {string}
     * @memberof TripRequestResponseJourneyLegProperties
     */
    DIFFERENT_FARES?: string;
    /**
     * This indicates whether or not the vehicle is wheelchair accessible.
     * @type {string}
     * @memberof TripRequestResponseJourneyLegProperties
     */
    planLowFloorVehicle?: string;
    /**
     * This indicates whether or not the stop is wheelchair accessible.
     * @type {string}
     * @memberof TripRequestResponseJourneyLegProperties
     */
    planWheelChairAccess?: string;
    /**
     * XXX seen a value of SUPPLEMENT for ferry route 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegProperties
     */
    lineType?: string;
    /**
     * This value is not currently in use.
     * @type {Array<string>}
     * @memberof TripRequestResponseJourneyLegProperties
     */
    vehicleAccess?: Array<string>;
}

/**
 * Contains information about a single stop in the journey leg. Typically, the first stop in a journey leg will only include departure time information, while the last stop in a journey leg will only include arrival time information. Stops in between will include both arrival and departure time information. 
 * @export
 * @interface TripRequestResponseJourneyLegStop
 */
export interface TripRequestResponseJourneyLegStop {
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated arrival time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `arrivalTimePlanned`. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    arrivalTimeEstimated?: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned arrival time. This is the original scheduled time. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    arrivalTimePlanned?: string;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     * @type {Array<number>}
     * @memberof TripRequestResponseJourneyLegStop
     */
    coord?: Array<number>;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated departure time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `departureTimePlanned`. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    departureTimeEstimated?: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned departure time. This is the original scheduled time. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    departureTimePlanned?: string;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    disassembledName?: string;
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `stop_finder`, or can be used as the origin or destination in an `trip` request. The format of a location ID differs greatly, depending on the type of location it is. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    id?: string;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    name?: string;
    /**
     * If available, contains information about this location's parent location. For example, if the stop has a type of `platform`, then this field may contain information about the station in which the platform is located. 
     * @type {ParentLocation}
     * @memberof TripRequestResponseJourneyLegStop
     */
    parent?: ParentLocation;
    /**
     * 
     * @type {TripRequestResponseJourneyLegStopProperties}
     * @memberof TripRequestResponseJourneyLegStop
     */
    properties?: TripRequestResponseJourneyLegStopProperties;
    /**
     * This is the type of location being returned. It will typically represent a specific stop or platform. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStop
     */
    type?: TripRequestResponseJourneyLegStop.TypeEnum;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStop
 */
export namespace TripRequestResponseJourneyLegStop {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        Unknown = <any> 'unknown'
    }
}

/**
 * Describes a single download available for this journey stop.
 * @export
 * @interface TripRequestResponseJourneyLegStopDownload
 */
export interface TripRequestResponseJourneyLegStopDownload {
    /**
     * This indicates what type of download this is. For example, `RM` refers to Route Map. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopDownload
     */
    type?: string;
    /**
     * This is the URL for the download. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopDownload
     */
    url?: string;
}

/**
 * Contains walking directions for a walking leg.
 * @export
 * @interface TripRequestResponseJourneyLegStopFootpathInfo
 */
export interface TripRequestResponseJourneyLegStopFootpathInfo {
    /**
     * This is approximately how long in seconds the walking instructions contained in this element take to perform. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfo
     */
    duration?: number;
    /**
     * This describes the specific instructions for the walking leg. 
     * @type {Array<TripRequestResponseJourneyLegStopFootpathInfoFootpathElem>}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfo
     */
    footPathElem?: Array<TripRequestResponseJourneyLegStopFootpathInfoFootpathElem>;
    /**
     * This indicates where in the leg the walking part of this legs occurs, since for some legs this is included with transportation on a vehicle. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfo
     */
    position?: TripRequestResponseJourneyLegStopFootpathInfo.PositionEnum;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStopFootpathInfo
 */
export namespace TripRequestResponseJourneyLegStopFootpathInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum PositionEnum {
        BEFORE = <any> 'BEFORE',
        AFTER = <any> 'AFTER',
        IDEST = <any> 'IDEST'
    }
}

/**
 * The element describes a single walking instruction.
 * @export
 * @interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
 */
export interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElem {
    /**
     * Contains additional information about this instruction, but is generally unused. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    description?: string;
    /**
     * Indicates the starting location for this leg, in terms of locations in the system such as stops or places of interest. Typically, since these instructions indicate how to travel within a stop or station, the `origin` and `destination` will both reference the same stop, but the coordinate will be specific to this instruction. 
     * @type {TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    destination?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation;
    /**
     * Indicates the direction of travel for this instruction. Generally a ramp, escalator or stairs will go `UP` or `DOWN` to a different floor. This value will be `LEVEL` when the `type` field is also `LEVEL`. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    level?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElem.LevelEnum;
    /**
     * Indicates the floor number the instruction is starting from. If the `type` is `LEVEL`, then the `levelFrom` and `levelTo` values should be the same. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    levelFrom?: number;
    /**
     * Indicates the floor number the instruction ends of. If the `type` is `LEVEL`, then the `levelFrom` and `levelTo` values should be the same. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    levelTo?: number;
    /**
     * Indicates the starting location for this leg, in terms of locations in the system such as stops or places of interest. Typically, since these instructions indicate how to travel within a stop or station, the `origin` and `destination` will both reference the same stop, but the coordinate will be specific to this instruction. 
     * @type {TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    origin?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation;
    /**
     * This indicates the type of \"terrain\" for this instruction. `LEVEL` indicates a normal flat surface. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
     */
    type?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElem.TypeEnum;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStopFootpathInfoFootpathElem
 */
export namespace TripRequestResponseJourneyLegStopFootpathInfoFootpathElem {
    /**
     * @export
     * @enum {string}
     */
    export enum LevelEnum {
        DOWN = <any> 'DOWN',
        LEVEL = <any> 'LEVEL',
        UP = <any> 'UP'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ESCALATOR = <any> 'ESCALATOR',
        ELEVATOR = <any> 'ELEVATOR',
        STAIRS = <any> 'STAIRS',
        LEVEL = <any> 'LEVEL',
        RAMP = <any> 'RAMP'
    }
}

/**
 * This element describes a starting or finishing point for a walking instruction.
 * @export
 * @interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation
 */
export interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation {
    /**
     * This is an internal value used to group stops together.
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation
     */
    area?: number;
    /**
     * This is an identifier for this particular instruction / location, based on its location. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation
     */
    georef?: string;
    /**
     * 
     * @type {TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation
     */
    location?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation;
    /**
     * If available, this is a platform number that relates to this instruction. It defaults to `0` if there is no such information available. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocation
     */
    platform?: number;
}

/**
 * This includes information about the location in which this instruction takes place. 
 * @export
 * @interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation
 */
export interface TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation {
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. Although multiple instructions may reference the same location, this coordinate is specific to this particular instruction. 
     * @type {Array<number>}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation
     */
    coord?: Array<number>;
    /**
     * This the unique ID for the stop in which this instruction occurs.
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation
     */
    id?: string;
    /**
     * This is the type of location in which this instruction occurs.
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation
     */
    type?: TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation.TypeEnum;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation
 */
export namespace TripRequestResponseJourneyLegStopFootpathInfoFootpathElemLocationLocation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Poi = <any> 'poi',
        Singlehouse = <any> 'singlehouse',
        Stop = <any> 'stop',
        Platform = <any> 'platform',
        Street = <any> 'street',
        Locality = <any> 'locality',
        Suburb = <any> 'suburb',
        Unknown = <any> 'unknown'
    }
}

/**
 * This element describes a single information message that may be associated with a journey leg. The data in this is similar to that from `add_info`, but is presented differently. 
 * @export
 * @interface TripRequestResponseJourneyLegStopInfo
 */
export interface TripRequestResponseJourneyLegStopInfo {
    /**
     * This is the descriptive alert content. It may contain HTML tags and/or HTML entities. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    content?: string;
    /**
     * This is a unique identifier for this particular service alert. Note that this same ID is used in `add_info` for the same alert. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    id?: string;
    /**
     * This value indicates how important the service alert is. A value of `high` or `veryHigh` likely indicates that the alert will correspond to an event that impacts the ability to travel for relevant users, while `low` or `veryLow` might be more of an informational message. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    priority?: TripRequestResponseJourneyLegStopInfo.PriorityEnum;
    /**
     * This is short summary that can be used as a heading for the alert content. It may contain HTML tags and/or HTML entities. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    subtitle?: string;
    /**
     * This contains a number of timestamps that describe when the alert was created, and when the described alert actually takes place and/or is relevant. 
     * @type {AdditionalInfoResponseTimestamps}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    timestamps?: AdditionalInfoResponseTimestamps;
    /**
     * This field contains a URL that contains additional information about the alert. This value is equivalent to the `infoLinkURL` value in `add_info`. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    url?: string;
    /**
     * This field contains a title that can be used when displaying the `url` URL. This value is equivalent to the `infoLinkText` value in `add_info`. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    urlText?: string;
    /**
     * This number indicates the version of this alert. Initially when it is created it has version `1`, but if it is then updated it will have a new `lastModification` value and the version will now be `2`. 
     * @type {number}
     * @memberof TripRequestResponseJourneyLegStopInfo
     */
    version?: number;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStopInfo
 */
export namespace TripRequestResponseJourneyLegStopInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum PriorityEnum {
        VeryLow = <any> 'veryLow',
        Low = <any> 'low',
        Normal = <any> 'normal',
        High = <any> 'high',
        VeryHigh = <any> 'veryHigh'
    }
}

/**
 * Contains additional information about this stop, such as wheelchair accessibility information. 
 * @export
 * @interface TripRequestResponseJourneyLegStopProperties
 */
export interface TripRequestResponseJourneyLegStopProperties {
    /**
     * Indicates if there is wheelchair access available at this stop. 
     * @type {string}
     * @memberof TripRequestResponseJourneyLegStopProperties
     */
    wheelchairAccess?: TripRequestResponseJourneyLegStopProperties.WheelchairAccessEnum;
    /**
     * Describes a list of downloadable files relevant to this location. 
     * @type {Array<TripRequestResponseJourneyLegStopDownload>}
     * @memberof TripRequestResponseJourneyLegStopProperties
     */
    downloads?: Array<TripRequestResponseJourneyLegStopDownload>;
}

/**
 * @export
 * @namespace TripRequestResponseJourneyLegStopProperties
 */
export namespace TripRequestResponseJourneyLegStopProperties {
    /**
     * @export
     * @enum {string}
     */
    export enum WheelchairAccessEnum {
        True = <any> 'true',
        False = <any> 'false'
    }
}

/**
 * This element describes a single message that may be included with an `trip` request.
 * @export
 * @interface TripRequestResponseMessage
 */
export interface TripRequestResponseMessage {
    /**
     * This is an error/warning code for the message. Note that the same code may be returned with a different meaning, depending on the context. The following error codes are possible:  * `-1000` (`PLACE_INVALID`) - Invalid locality input * `-1001` (`PLACE_WITHOUT_STOPS`) - Verified locality does not have stops * `-1010` (`PLACE_UNKNOWN_POOL`) - Locality not in locality tree * `-1020` (`PLACE_ALPHA_INVALID`) - Invalid alpha list  * `-2000` (`STOP_INVALID`) - Invalid stop input * `-2001` (`STOP_PLACE_ID_INVALID`) - Stop number not in locality  * `-3000` (`ADDRESS_INVALID`) - Invalid address input * `-3001` (`ADDRESS_PLACE_WITHOUT_ADDR`) - Locality does not have any addresses  * `-1000` (`IT_COORD_UNKNOWN`) - Transferred coordinate not supported (incorrect coordinate system) * `-1001` (`IT_COORD_OUT_OF_REGION`) - Transferred coordinates not supported (outside of region) * `-1002` (`IT_COORD_FORMAT_UNKNOWN`) - Transferred coordinate is ok, but the format does not match the value * `-200` (`IT_GEOREF_UNKNOWN`) - Invalid georeference * `-201` (`IT_GEOREF_OUT_OF_REGION`) - Invalid georeference section < 0 or > length of route section * `-300` (`IT_NO_START`) - No origin entered * `-301` (`IT_NO_DESTINATION`) - No destination entered * `-302` (`IT_NO_CONNECTION`) - No journey found * `-303` (`IT_NO_TRANSITIONS`) - No transition point  * `-3000` (`IT_ADDRESS_INVALID`) - Address invalid * `-3001` (`IT_ADDRESS_PLACE_WITHOUT_ADDR`) - Locality does not have any addresses * `-3002` (`IT_ADDRESS_EMPTY`) - Empty address input  * `-5000` (`IT_LOCATOR_INVALID`) - Input locality is invalid * `-5001` (`IT_LOCATOR_INVALID_POOL`) - Input locality not available in locality tree * `-5002` (`IT_LOCATOR_BULK_POSTCODE`) - Bulk postcode, postcode with addresses  * `-4000` (`IT_STREET_INVALID`) - Input street is invalid * `-4001` (`IT_STREE_PLACE_WITHOUT_ADDR`) - Locality does not have any streets  * `-8010` (`ANY_UNIQUE`) - Any input uniquely verified * `-8011` (`ANY_LIST`) - Any list verified * `-8012` (`ANY_INVALID`) - Any input invalid * `-8013` (`ANY_PLACE_WITHOUT_MATCHES`) - Any location found, but cannot be verified * `-8014` (`ANY_TOO_MANY_MATCHES`) - Any input has too many matches * `-8020` (`ANY_MATCH_NONE`) - No matches * `-8031` (`ANY_MATCH`) - Matches (e.g. buildings) found for a street * `-8032` (`ANY_NO_MATCH`) - No matches found (e.g. buildings) for a street  * `-4000` (`NO_CONNECTION`) - No journey found for the time entered * `-4001` (`DATE_INVALID`) - Date not possible in the current timetable period * `-4002` (`NO_ORIGIN`) - No origin verified * `-4003` (`NO_DESTINATION`) - No destination verified * `-4004` (`ORIGIN_UNKNOWN`) - Origin exists, but cannot be identified * `-4005` (`DESTINATION_UNKNOWN`) - Destination exists, but cannot be identified * `-4006` (`JUST_WALK`) - Only a walk has been found * `-4007` (`ORIGIN_EQUI_DEST`) - Origin and destination are identical * `-4008` (`VIA_UNKNOWN`) - Unknown via-point * `-4009` (`TIMESPAN_INVALID`) - Time interval is invalid * `-4010` (`VIA_NOINTERCHANGE`) - Via stop point is not an interchange stop * `-4011` (`VIA_INVALID`) - Invalid via input * `+4011` (`TRIPSTATUS_ALREADYFOUND`) - Moved journey already exists * `-4012` (`ORIGIN_OUTOFPERMITTEDAREA`) - Origin outside the valid zone (e.g. fare zone) * `-4013` (`DESTINATION_OUTOFPERMITTEDAREA`) - Destination outside the valid zone (e.g. fare zone) * `-4014` (`VIA_OUTOFPERMITTEDAREA`) - Via outside the valid zone (e.g. fare zone) * `-4020` (`NO_TRANSITION`) - No transition point found * `-4030` (`NO_DEPARTURE`) - No departures found * `-4040` (`NO_ARRIVAL`) - No arrivals found * `-4050` (`NO_SERVINGLINES`) - No services found at this stop * `-4060` (`NO_MATCHINGOPERATORS`) - No matching operators  * `-4100` (`NO_CONNECTION_BECAUSE_OF_RULE`) - No journey because of a rule * `-4101` (`RULE_CHANGED_OPTIONS`) - Rule changed the options * `-4102` (`RULE_CHANGED_USEONLY`) - Rule chagned the permitted vehicles * `-4103` (`RECOMPUTE_BECAUSE_OF_RULE`) - Journey has been recalculated due to a rule with different parameters * `-4104` (`RULE_CHANGED_WITHOUTVIA`) - Rule removed the via point * `-4300` (`NO_CONNECTION_BECAUSE_OF_PREFERTOEXCLUDE_SETTINGS`) - Invalid prefer-to-exclude parameter * `-4301` (`NO_CONNECTION_BECAUSE_OF_PREFERTOINCLUDE_SETTINGS`) - Invalid prefer-to-include parameter * `-4302` (`NO_CONNECTION_BECAUSE_OF_MIXEDSETTING_SETTINGS`) - Invalid mixing of prefer-to-exclude/include parameters * `-4303` (`NO_CONNECTION_BECAUSE_OF_WALKING_SETTINGS`) - Invalid footpath parameter * `-9999` (`TRIP_CANCELLED`) - Trip has been cancelled * `-10015` (`ERROR_ITROUTER_NO_IT_CONN`) - No journey found 
     * @type {number}
     * @memberof TripRequestResponseMessage
     */
    code?: number;
    /**
     * This is the error summary for the given message.
     * @type {string}
     * @memberof TripRequestResponseMessage
     */
    error?: string;
    /**
     * Indicates the server module that provided this system message.
     * @type {string}
     * @memberof TripRequestResponseMessage
     */
    module?: string;
    /**
     * Indicates the type of system message.
     * @type {string}
     * @memberof TripRequestResponseMessage
     */
    type?: string;
}

/**
 * Includes system messages that may be relevant to this particular request.
 * @export
 * @interface TripRequestResponseSystemMessages
 */
export interface TripRequestResponseSystemMessages {
    /**
     * Contains zero or more messages.
     * @type {Array<TripRequestResponseMessage>}
     * @memberof TripRequestResponseSystemMessages
     */
    responseMessages?: Array<TripRequestResponseMessage>;
}

/**
 * This element describes a route, including information about its route number, usual destination, route type and operator. 
 * @export
 * @interface TripTransportation
 */
export interface TripTransportation {
    /**
     * Contains a description of this route. 
     * @type {string}
     * @memberof TripTransportation
     */
    description?: string;
    /**
     * 
     * @type {TripTransportationDestination}
     * @memberof TripTransportation
     */
    destination?: TripTransportationDestination;
    /**
     * Contains a very short name for the route. 
     * @type {string}
     * @memberof TripTransportation
     */
    disassembledName?: string;
    /**
     * Contains an ID for the icon that can be used for this route. Different values here are used to differentiate differents types of the same route type. For example, private ferries have a different wayfinding icon to ferries operated by Sydney Ferries.  * `1`: Sydney Trains (product class `1`) * `2`: Intercity Trains (product class `1`) * `3`: Regional Trains (product class `1`) * `19`: Temporary Trains (product class `1`)  * `24`: Sydney Metro (product class `2`)  * `13`: Sydney Light Rail (product class `4`) * `20`: Temporary Light Rail (product class `4`) * `21`: Newcastle Light Rail (product class `4`)  * `4`: Blue Mountains Buses (product class `5`) * `5`: Sydney Buses (product class `5`) * `6`: Central Coast Buses (product class `5`) * `14`: Temporary Buses (product class `5`) * `15`: Hunter Buses (product class `5`) * `23`: On Demand (product class `5`) * `31`: Central West and Orana (product class `5`) * `32`: Far West (product class `5`) * `33`: New England North West (product class `5`) * `34`: Newcastle and Hunter (product class `5`) * `35`: North Coast (product class `5`) * `36`: Riverina Murray (product class `5`) * `37`: South East and Tablelands (product class `5`) * `38`: Sydney and Surrounds (product class `5`)  * `9`: Private Buses (product class `5`) * `17`: Private Coaches (product class `5`)  * `7`: Regional Coaches (product class `7`) * `22`: Temporary Coaches (product class `7`)  * `10`: Sydney Ferries (product class `9`) * `11`: Newcastle Ferries (product class `9`) * `12`: Private Ferries (product class `9`) * `18`: Temporary Ferries (product class `9`)  * `8`: School Buses (product class `11`) 
     * @type {number}
     * @memberof TripTransportation
     */
    iconId?: number;
    /**
     * This is an ID that uniquely identifies this route. 
     * @type {string}
     * @memberof TripTransportation
     */
    id?: string;
    /**
     * This contains the full name of the route. 
     * @type {string}
     * @memberof TripTransportation
     */
    name?: string;
    /**
     * Contains a short name for the route. 
     * @type {string}
     * @memberof TripTransportation
     */
    number?: string;
    /**
     * 
     * @type {TripTransportationOperator}
     * @memberof TripTransportation
     */
    operator?: TripTransportationOperator;
    /**
     * This element contains additional properties about the route.
     * @type {RouteProduct}
     * @memberof TripTransportation
     */
    product?: RouteProduct;
    /**
     * 
     * @type {TripTransportationProperties}
     * @memberof TripTransportation
     */
    properties?: TripTransportationProperties;
}

/**
 * This element contains information about where vehicles on this route terminate. 
 * @export
 * @interface TripTransportationDestination
 */
export interface TripTransportationDestination {
    /**
     * Contains a unique identifier (if available) of the destination for this route. 
     * @type {string}
     * @memberof TripTransportationDestination
     */
    id?: string;
    /**
     * This is the name of the destination for this route. 
     * @type {string}
     * @memberof TripTransportationDestination
     */
    name?: string;
}

/**
 * This element describes the operator of this route. 
 * @export
 * @interface TripTransportationOperator
 */
export interface TripTransportationOperator {
    /**
     * Contains a unique identifier for the given operator. 
     * @type {string}
     * @memberof TripTransportationOperator
     */
    id?: string;
    /**
     * Contains the name of the operator of the route. 
     * @type {string}
     * @memberof TripTransportationOperator
     */
    name?: string;
}

/**
 * Contains additional properties about this route. 
 * @export
 * @interface TripTransportationProperties
 */
export interface TripTransportationProperties {
    /**
     * XXX
     * @type {boolean}
     * @memberof TripTransportationProperties
     */
    isTTB?: boolean;
    /**
     * This is an ID for this journey option.
     * @type {number}
     * @memberof TripTransportationProperties
     */
    tripCode?: number;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop. 
         * @summary Provides capability to display all public transport service status and incident information (as published from the Service Alert Messaging System).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} [filterDateValid] This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is &#x60;DD-MM-YYYY&#x60;. For example, 12 September 2016 would be represented by &#x60;12-09-2016&#x60;. 
         * @param {number} [filterMOTType] This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * &#x60;1&#x60;: Train * &#x60;2&#x60;: Metro * &#x60;4&#x60;: Light Rail * &#x60;5&#x60;: Bus * &#x60;7&#x60;: Coach * &#x60;9&#x60;: Ferry * &#x60;11&#x60;: School Bus  To search for more than one mode, include the parameter multiple times. 
         * @param {'current'} [filterPublicationStatus] This field can be used so only current alerts are returned, and not historic alerts. 
         * @param {string} [itdLPxxSelStop] This parameter allows you to filter the returned items by its stop ID or global stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to &#x60;10111010&#x60; (stop ID) or &#x60;200060&#x60; (global stop ID). You can use the &#x60;stop_finder&#x60; API call to determine the ID for a particular stop. 
         * @param {string} [itdLPxxSelLine] This parameter allows you to filter the returned items by line number. For example, &#x60;020T1&#x60;. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [itdLPxxSelOperator] This parameter allows you to filter the returned items by operator ID. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineDir] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:D&#x60;, (NNN: subnet, LLLLL: Route number, D: direction &#x60;H&#x60;/&#x60;R&#x60;). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineSub] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:E&#x60;, (NNN: subnet, LLLLL: Route number, E: supplement). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswAddinfoRequest(outputFormat: 'rapidJSON', filterDateValid?: string, filterMOTType?: number, filterPublicationStatus?: 'current', itdLPxxSelStop?: string, itdLPxxSelLine?: string, itdLPxxSelOperator?: string, filterPNLineDir?: string, filterPNLineSub?: string, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'outputFormat' is not null or undefined
            if (outputFormat === null || outputFormat === undefined) {
                throw new RequiredError('outputFormat','Required parameter outputFormat was null or undefined when calling tfnswAddinfoRequest.');
            }
            const localVarPath = `/add_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (filterDateValid !== undefined) {
                localVarQueryParameter['filterDateValid'] = filterDateValid;
            }

            if (filterMOTType !== undefined) {
                localVarQueryParameter['filterMOTType'] = filterMOTType;
            }

            if (filterPublicationStatus !== undefined) {
                localVarQueryParameter['filterPublicationStatus'] = filterPublicationStatus;
            }

            if (itdLPxxSelStop !== undefined) {
                localVarQueryParameter['itdLPxx_selStop'] = itdLPxxSelStop;
            }

            if (itdLPxxSelLine !== undefined) {
                localVarQueryParameter['itdLPxx_selLine'] = itdLPxxSelLine;
            }

            if (itdLPxxSelOperator !== undefined) {
                localVarQueryParameter['itdLPxx_selOperator'] = itdLPxxSelOperator;
            }

            if (filterPNLineDir !== undefined) {
                localVarQueryParameter['filterPNLineDir'] = filterPNLineDir;
            }

            if (filterPNLineSub !== undefined) {
                localVarQueryParameter['filterPNLineSub'] = filterPNLineSub;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so. 
         * @summary When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} coord The coordinate is in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, the following &#x60;coord&#x60; value can be used to search around Central Station: &#x60;151.206290:-33.884080:EPSG:4326&#x60;. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format. 
         * @param {number} inclFilter This enables \&quot;advanced filter mode\&quot; on the server, which is required to enable searching using coordinates. 
         * @param {'GIS_POINT' | 'BUS_POINT' | 'POI_POINT'} type1 This specifies the type of items to return.  * &#x60;GIS_POINT&#x60;: GIS points, including Opal resellers (see &#x60;inclDrawClasses_1&#x60;) * &#x60;BUS_POINT&#x60;: Stops/stations * &#x60;POI_POINT&#x60;: Places of interest  The &#x60;_1&#x60; suffix is an index for this particular filter. You can specify multiple filters by incrementing the suffix for each combination of &#x60;type&#x60;, &#x60;radius&#x60; and &#x60;inclDrawClasses&#x60;. For example, &#x60;type_1&#x60; means the first filter, &#x60;type_2&#x60; refers to the second, and so on. 
         * @param {number} radius1 This indicates the maximum number of metres to search in all directions from the location specified in &#x60;coord&#x60;. For example, if you use a value of &#x60;500&#x60;, a &#x60;type_1&#x60; value of &#x60;GIS_POINT&#x60; and &#x60;inclDrawClasses_1&#x60; with a value of &#x60;74&#x60;, all Opal resellers within 500 metres will be returned. The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {number} [inclDrawClasses1] This flag changes the list of POIs that are returned. To return Opal resellers, set this value to &#x60;74&#x60; and &#x60;type_1&#x60; to &#x60;GIS_POINT&#x60;.The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {'true'} [poisOnMapMacro] This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswCoordRequest(outputFormat: 'rapidJSON', coord: string, coordOutputFormat: 'EPSG:4326', inclFilter: number, type1: 'GIS_POINT' | 'BUS_POINT' | 'POI_POINT', radius1: number, inclDrawClasses1?: number, poisOnMapMacro?: 'true', version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'outputFormat' is not null or undefined
            if (outputFormat === null || outputFormat === undefined) {
                throw new RequiredError('outputFormat','Required parameter outputFormat was null or undefined when calling tfnswCoordRequest.');
            }
            // verify required parameter 'coord' is not null or undefined
            if (coord === null || coord === undefined) {
                throw new RequiredError('coord','Required parameter coord was null or undefined when calling tfnswCoordRequest.');
            }
            // verify required parameter 'coordOutputFormat' is not null or undefined
            if (coordOutputFormat === null || coordOutputFormat === undefined) {
                throw new RequiredError('coordOutputFormat','Required parameter coordOutputFormat was null or undefined when calling tfnswCoordRequest.');
            }
            // verify required parameter 'inclFilter' is not null or undefined
            if (inclFilter === null || inclFilter === undefined) {
                throw new RequiredError('inclFilter','Required parameter inclFilter was null or undefined when calling tfnswCoordRequest.');
            }
            // verify required parameter 'type1' is not null or undefined
            if (type1 === null || type1 === undefined) {
                throw new RequiredError('type1','Required parameter type1 was null or undefined when calling tfnswCoordRequest.');
            }
            // verify required parameter 'radius1' is not null or undefined
            if (radius1 === null || radius1 === undefined) {
                throw new RequiredError('radius1','Required parameter radius1 was null or undefined when calling tfnswCoordRequest.');
            }
            const localVarPath = `/coord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (coord !== undefined) {
                localVarQueryParameter['coord'] = coord;
            }

            if (coordOutputFormat !== undefined) {
                localVarQueryParameter['coordOutputFormat'] = coordOutputFormat;
            }

            if (inclFilter !== undefined) {
                localVarQueryParameter['inclFilter'] = inclFilter;
            }

            if (type1 !== undefined) {
                localVarQueryParameter['type_1'] = type1;
            }

            if (radius1 !== undefined) {
                localVarQueryParameter['radius_1'] = radius1;
            }

            if (inclDrawClasses1 !== undefined) {
                localVarQueryParameter['inclDrawClasses_1'] = inclDrawClasses1;
            }

            if (poisOnMapMacro !== undefined) {
                localVarQueryParameter['PoisOnMapMacro'] = poisOnMapMacro;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of departures for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop. 
         * @summary Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb'} typeDm This specifies the type of results expected based on the search input in &#x60;name_dm&#x60;. By specifying &#x60;any&#x60;, locations of all types can be returned. Typically, this API call is used for a specific stop, so &#x60;stop&#x60; should be used along with a stop ID or global stop ID in &#x60;name_dm&#x60;. 
         * @param {string} nameDm This is the search term that will be used to find locations. If the combination of this value and &#x60;type_dm&#x60; results in more than one location found - or &#x60;mode&#x60; is not set to &#x60;direct&#x60;, then a list of stops and no departures will be returned. If &#x60;type_dm&#x60; is set to &#x60;stop&#x60; then this value can take a stop ID or a global stop ID. 
         * @param {'direct'} [mode] This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of &#x60;type_dm&#x60; and &#x60;name_dm&#x60; returning only a single result, otherwise a list of stops and no departures shall be returned. 
         * @param {'$USEPOINT$'} [nameKeyDm] Setting this parameter to &#x60;$USEPOINT$&#x60; enables you to request departures for a specific platform within a station. If this isn&#39;t used, then departures for all platforms at the stop specified in &#x60;name_dm&#x60; are returned. 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; value. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; value. If not specified, the current server time is used. 
         * @param {'true'} [departureMonitorMacro] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site. It is recommended this is enabled, along with the &#x60;TfNSWDM&#x60; parameter. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the departure monitor. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWDM] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. It is recommended this is enabled, along with the &#x60;departureMonitorMacro&#x60; parameter. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswDmRequest(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', typeDm: 'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb', nameDm: string, mode?: 'direct', nameKeyDm?: '$USEPOINT$', itdDate?: string, itdTime?: string, departureMonitorMacro?: 'true', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWDM?: 'true', version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'outputFormat' is not null or undefined
            if (outputFormat === null || outputFormat === undefined) {
                throw new RequiredError('outputFormat','Required parameter outputFormat was null or undefined when calling tfnswDmRequest.');
            }
            // verify required parameter 'coordOutputFormat' is not null or undefined
            if (coordOutputFormat === null || coordOutputFormat === undefined) {
                throw new RequiredError('coordOutputFormat','Required parameter coordOutputFormat was null or undefined when calling tfnswDmRequest.');
            }
            // verify required parameter 'typeDm' is not null or undefined
            if (typeDm === null || typeDm === undefined) {
                throw new RequiredError('typeDm','Required parameter typeDm was null or undefined when calling tfnswDmRequest.');
            }
            // verify required parameter 'nameDm' is not null or undefined
            if (nameDm === null || nameDm === undefined) {
                throw new RequiredError('nameDm','Required parameter nameDm was null or undefined when calling tfnswDmRequest.');
            }
            const localVarPath = `/departure_mon`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (coordOutputFormat !== undefined) {
                localVarQueryParameter['coordOutputFormat'] = coordOutputFormat;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (typeDm !== undefined) {
                localVarQueryParameter['type_dm'] = typeDm;
            }

            if (nameDm !== undefined) {
                localVarQueryParameter['name_dm'] = nameDm;
            }

            if (nameKeyDm !== undefined) {
                localVarQueryParameter['nameKey_dm'] = nameKeyDm;
            }

            if (itdDate !== undefined) {
                localVarQueryParameter['itdDate'] = itdDate;
            }

            if (itdTime !== undefined) {
                localVarQueryParameter['itdTime'] = itdTime;
            }

            if (departureMonitorMacro !== undefined) {
                localVarQueryParameter['departureMonitorMacro'] = departureMonitorMacro;
            }

            if (excludedMeans !== undefined) {
                localVarQueryParameter['excludedMeans'] = excludedMeans;
            }

            if (exclMOT1 !== undefined) {
                localVarQueryParameter['exclMOT_1'] = exclMOT1;
            }

            if (exclMOT2 !== undefined) {
                localVarQueryParameter['exclMOT_2'] = exclMOT2;
            }

            if (exclMOT4 !== undefined) {
                localVarQueryParameter['exclMOT_4'] = exclMOT4;
            }

            if (exclMOT5 !== undefined) {
                localVarQueryParameter['exclMOT_5'] = exclMOT5;
            }

            if (exclMOT7 !== undefined) {
                localVarQueryParameter['exclMOT_7'] = exclMOT7;
            }

            if (exclMOT9 !== undefined) {
                localVarQueryParameter['exclMOT_9'] = exclMOT9;
            }

            if (exclMOT11 !== undefined) {
                localVarQueryParameter['exclMOT_11'] = exclMOT11;
            }

            if (tfNSWDM !== undefined) {
                localVarQueryParameter['TfNSWDM'] = tfNSWDM;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input, while the best match will be indicated by the `isBest` value. 
         * @summary Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} nameSf This is the search term that will be used to find locations. To lookup a coordinate, set &#x60;type_sf&#x60; to &#x60;coord&#x60;, and use the following format: &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, &#x60;151.206290:-33.884080:EPSG:4326&#x60;. To lookup a stop set &#x60;type_sf&#x60; to  &#x60;stop&#x60; and enter the stop id or global stop ID. For example, &#x60;10101100&#x60; 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'stop'} [typeSf] This specifies the type of results expected in the list of returned stops. By specifying &#x60;any&#x60;, locations of all types can be returned. If you specifically know that you&#39;re searching using a coord, specify &#x60;coord&#x60;. Likewise, if you&#39;re using a stop ID or global stop ID as an input, use &#x60;stop&#x60; for more accurate results. 
         * @param {'true'} [tfNSWSF] Including this parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswStopfinderRequest(outputFormat: 'rapidJSON', nameSf: string, coordOutputFormat: 'EPSG:4326', typeSf?: 'any' | 'coord' | 'poi' | 'stop', tfNSWSF?: 'true', version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'outputFormat' is not null or undefined
            if (outputFormat === null || outputFormat === undefined) {
                throw new RequiredError('outputFormat','Required parameter outputFormat was null or undefined when calling tfnswStopfinderRequest.');
            }
            // verify required parameter 'nameSf' is not null or undefined
            if (nameSf === null || nameSf === undefined) {
                throw new RequiredError('nameSf','Required parameter nameSf was null or undefined when calling tfnswStopfinderRequest.');
            }
            // verify required parameter 'coordOutputFormat' is not null or undefined
            if (coordOutputFormat === null || coordOutputFormat === undefined) {
                throw new RequiredError('coordOutputFormat','Required parameter coordOutputFormat was null or undefined when calling tfnswStopfinderRequest.');
            }
            const localVarPath = `/stop_finder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (typeSf !== undefined) {
                localVarQueryParameter['type_sf'] = typeSf;
            }

            if (nameSf !== undefined) {
                localVarQueryParameter['name_sf'] = nameSf;
            }

            if (coordOutputFormat !== undefined) {
                localVarQueryParameter['coordOutputFormat'] = coordOutputFormat;
            }

            if (tfNSWSF !== undefined) {
                localVarQueryParameter['TfNSWSF'] = tfNSWSF;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes the the specific path the vehicle(s) will take. 
         * @summary Provides capability to provide NSW public transport trip plan options, including walking and driving legs and real-time information.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'dep' | 'arr'} depArrMacro This value anchors the requested date time. If set to &#x60;dep&#x60;, then trips *departing after* the specified date/time *at the specified location* are included. If set to &#x60;arr&#x60;, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the &#x60;itdDate&#x60; and &#x60;itdTime&#x60; values. 
         * @param {'any' | 'coord'} typeOrigin This is the type of data specified in the &#x60;name_origin&#x60; field. The origin indicates the starting point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_origin&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_origin&#x60;. 
         * @param {string} nameOrigin This value is used to indicate the starting point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {'any' | 'coord'} typeDestination This is the type of data specified in the &#x60;name_destination&#x60; field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_destination&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_destination&#x60;. 
         * @param {string} nameDestination This value is used to indicate the finishing point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, &#x60;20160901&#x60; refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, &#x60;2215&#x60; refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server time is used. 
         * @param {number} [calcNumberOfTrips] This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
         * @param {'on'} [wheelchair] Including this parameter (regardless of its value) ensures that only wheelchair-accessible options are returned. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the trip plan. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWTR] Including this parameter enables a number of options that result in this API call operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {number} [itOptionsActive] This parameter activates the options for individual transport. If the parameter is disabled, the parameters concerning individual transport will not be taken into account. possible values are 0 and 1 
         * @param {boolean} [computeMonomodalTripBicycle] Activates the calculation of a monomodal trip, i.e., a trip that takes place exclusively with the means of transport &lt;means of transport&gt;, e.g., with bicycle. Note 1: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Note 2: If no monomodal trip with the means of transport &lt;means of transport&gt; is calculated despite the parameter, the maximum time is often set too low. The parameter MaxITTime applies to all means of transport, the parameter MaxITTime&lt;means of transport&gt;to the means of transport &lt;means of transport&gt; (e.g., MaxITTime107). These parameters are located in the [Parameters] section or are added to it. The configuration can be alternatively overridden bythe maxTime&lt;Transport means&gt; parameter. 
         * @param {number} [cycleSpeed] The value of the &lt;speed&gt; parameter is used to specify the speed of cycle travel in kilometers per hour.Note: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. If the parameter is to be specified together with a profile, the bikeProfSpeed parameter can be used.The parameter “&#39;cycleSpeed” specifies the desired real speed of the user for the bike route, which overwrites the speed in the SpeedSettings of the corresponding “bikeProfSpeed”. 
         * @param {'EASIER' | 'MODERATE' | 'MOST_DIRECT'} [bikeProfSpeed] With the parameter &#39;bikeProfSpeed&#39; a bike profile name is passed 
         * @param {number} [maxTimeBicycle] The value of the this parameter sets the maximum time to be covered by the means of cycling. The time is specified in minutes. Note: To use this parameter, the options for individual transport must be enabled with itOptionsActive&#x3D;1 
         * @param {number} [onlyITBicycle] Restricts the calculation to trips with the bikes only. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [useElevationData] If this parameter is active, the elevation data is taken into account in the trip calculation for all means of transport and output in a route description for each individual transport section. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [elevFac] This parameter specifies the maximum slope for bike routes. Roads with a slope greater than the specified?? one are avoided. The slope is specified by a factor &lt;factor&gt; whose value range is [0..100]. By default, the value of the parameter is 50 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswTripRequest2(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', depArrMacro: 'dep' | 'arr', typeOrigin: 'any' | 'coord', nameOrigin: string, typeDestination: 'any' | 'coord', nameDestination: string, itdDate?: string, itdTime?: string, calcNumberOfTrips?: number, wheelchair?: 'on', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWTR?: 'true', version?: string, itOptionsActive?: number, computeMonomodalTripBicycle?: boolean, cycleSpeed?: number, bikeProfSpeed?: 'EASIER' | 'MODERATE' | 'MOST_DIRECT', maxTimeBicycle?: number, onlyITBicycle?: number, useElevationData?: number, elevFac?: number, options: any = {}): FetchArgs {
            // verify required parameter 'outputFormat' is not null or undefined
            if (outputFormat === null || outputFormat === undefined) {
                throw new RequiredError('outputFormat','Required parameter outputFormat was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'coordOutputFormat' is not null or undefined
            if (coordOutputFormat === null || coordOutputFormat === undefined) {
                throw new RequiredError('coordOutputFormat','Required parameter coordOutputFormat was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'depArrMacro' is not null or undefined
            if (depArrMacro === null || depArrMacro === undefined) {
                throw new RequiredError('depArrMacro','Required parameter depArrMacro was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'typeOrigin' is not null or undefined
            if (typeOrigin === null || typeOrigin === undefined) {
                throw new RequiredError('typeOrigin','Required parameter typeOrigin was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'nameOrigin' is not null or undefined
            if (nameOrigin === null || nameOrigin === undefined) {
                throw new RequiredError('nameOrigin','Required parameter nameOrigin was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'typeDestination' is not null or undefined
            if (typeDestination === null || typeDestination === undefined) {
                throw new RequiredError('typeDestination','Required parameter typeDestination was null or undefined when calling tfnswTripRequest2.');
            }
            // verify required parameter 'nameDestination' is not null or undefined
            if (nameDestination === null || nameDestination === undefined) {
                throw new RequiredError('nameDestination','Required parameter nameDestination was null or undefined when calling tfnswTripRequest2.');
            }
            const localVarPath = `/trip`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (coordOutputFormat !== undefined) {
                localVarQueryParameter['coordOutputFormat'] = coordOutputFormat;
            }

            if (depArrMacro !== undefined) {
                localVarQueryParameter['depArrMacro'] = depArrMacro;
            }

            if (itdDate !== undefined) {
                localVarQueryParameter['itdDate'] = itdDate;
            }

            if (itdTime !== undefined) {
                localVarQueryParameter['itdTime'] = itdTime;
            }

            if (typeOrigin !== undefined) {
                localVarQueryParameter['type_origin'] = typeOrigin;
            }

            if (nameOrigin !== undefined) {
                localVarQueryParameter['name_origin'] = nameOrigin;
            }

            if (typeDestination !== undefined) {
                localVarQueryParameter['type_destination'] = typeDestination;
            }

            if (nameDestination !== undefined) {
                localVarQueryParameter['name_destination'] = nameDestination;
            }

            if (calcNumberOfTrips !== undefined) {
                localVarQueryParameter['calcNumberOfTrips'] = calcNumberOfTrips;
            }

            if (wheelchair !== undefined) {
                localVarQueryParameter['wheelchair'] = wheelchair;
            }

            if (excludedMeans !== undefined) {
                localVarQueryParameter['excludedMeans'] = excludedMeans;
            }

            if (exclMOT1 !== undefined) {
                localVarQueryParameter['exclMOT_1'] = exclMOT1;
            }

            if (exclMOT2 !== undefined) {
                localVarQueryParameter['exclMOT_2'] = exclMOT2;
            }

            if (exclMOT4 !== undefined) {
                localVarQueryParameter['exclMOT_4'] = exclMOT4;
            }

            if (exclMOT5 !== undefined) {
                localVarQueryParameter['exclMOT_5'] = exclMOT5;
            }

            if (exclMOT7 !== undefined) {
                localVarQueryParameter['exclMOT_7'] = exclMOT7;
            }

            if (exclMOT9 !== undefined) {
                localVarQueryParameter['exclMOT_9'] = exclMOT9;
            }

            if (exclMOT11 !== undefined) {
                localVarQueryParameter['exclMOT_11'] = exclMOT11;
            }

            if (tfNSWTR !== undefined) {
                localVarQueryParameter['TfNSWTR'] = tfNSWTR;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (itOptionsActive !== undefined) {
                localVarQueryParameter['itOptionsActive'] = itOptionsActive;
            }

            if (computeMonomodalTripBicycle !== undefined) {
                localVarQueryParameter['computeMonomodalTripBicycle'] = computeMonomodalTripBicycle;
            }

            if (cycleSpeed !== undefined) {
                localVarQueryParameter['cycleSpeed'] = cycleSpeed;
            }

            if (bikeProfSpeed !== undefined) {
                localVarQueryParameter['bikeProfSpeed'] = bikeProfSpeed;
            }

            if (maxTimeBicycle !== undefined) {
                localVarQueryParameter['maxTimeBicycle'] = maxTimeBicycle;
            }

            if (onlyITBicycle !== undefined) {
                localVarQueryParameter['onlyITBicycle'] = onlyITBicycle;
            }

            if (useElevationData !== undefined) {
                localVarQueryParameter['useElevationData'] = useElevationData;
            }

            if (elevFac !== undefined) {
                localVarQueryParameter['elevFac'] = elevFac;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop. 
         * @summary Provides capability to display all public transport service status and incident information (as published from the Service Alert Messaging System).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} [filterDateValid] This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is &#x60;DD-MM-YYYY&#x60;. For example, 12 September 2016 would be represented by &#x60;12-09-2016&#x60;. 
         * @param {number} [filterMOTType] This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * &#x60;1&#x60;: Train * &#x60;2&#x60;: Metro * &#x60;4&#x60;: Light Rail * &#x60;5&#x60;: Bus * &#x60;7&#x60;: Coach * &#x60;9&#x60;: Ferry * &#x60;11&#x60;: School Bus  To search for more than one mode, include the parameter multiple times. 
         * @param {'current'} [filterPublicationStatus] This field can be used so only current alerts are returned, and not historic alerts. 
         * @param {string} [itdLPxxSelStop] This parameter allows you to filter the returned items by its stop ID or global stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to &#x60;10111010&#x60; (stop ID) or &#x60;200060&#x60; (global stop ID). You can use the &#x60;stop_finder&#x60; API call to determine the ID for a particular stop. 
         * @param {string} [itdLPxxSelLine] This parameter allows you to filter the returned items by line number. For example, &#x60;020T1&#x60;. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [itdLPxxSelOperator] This parameter allows you to filter the returned items by operator ID. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineDir] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:D&#x60;, (NNN: subnet, LLLLL: Route number, D: direction &#x60;H&#x60;/&#x60;R&#x60;). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineSub] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:E&#x60;, (NNN: subnet, LLLLL: Route number, E: supplement). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswAddinfoRequest(outputFormat: 'rapidJSON', filterDateValid?: string, filterMOTType?: number, filterPublicationStatus?: 'current', itdLPxxSelStop?: string, itdLPxxSelLine?: string, itdLPxxSelOperator?: string, filterPNLineDir?: string, filterPNLineSub?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AdditionalInfoResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tfnswAddinfoRequest(outputFormat, filterDateValid, filterMOTType, filterPublicationStatus, itdLPxxSelStop, itdLPxxSelLine, itdLPxxSelOperator, filterPNLineDir, filterPNLineSub, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so. 
         * @summary When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} coord The coordinate is in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, the following &#x60;coord&#x60; value can be used to search around Central Station: &#x60;151.206290:-33.884080:EPSG:4326&#x60;. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format. 
         * @param {number} inclFilter This enables \&quot;advanced filter mode\&quot; on the server, which is required to enable searching using coordinates. 
         * @param {'GIS_POINT' | 'BUS_POINT' | 'POI_POINT'} type1 This specifies the type of items to return.  * &#x60;GIS_POINT&#x60;: GIS points, including Opal resellers (see &#x60;inclDrawClasses_1&#x60;) * &#x60;BUS_POINT&#x60;: Stops/stations * &#x60;POI_POINT&#x60;: Places of interest  The &#x60;_1&#x60; suffix is an index for this particular filter. You can specify multiple filters by incrementing the suffix for each combination of &#x60;type&#x60;, &#x60;radius&#x60; and &#x60;inclDrawClasses&#x60;. For example, &#x60;type_1&#x60; means the first filter, &#x60;type_2&#x60; refers to the second, and so on. 
         * @param {number} radius1 This indicates the maximum number of metres to search in all directions from the location specified in &#x60;coord&#x60;. For example, if you use a value of &#x60;500&#x60;, a &#x60;type_1&#x60; value of &#x60;GIS_POINT&#x60; and &#x60;inclDrawClasses_1&#x60; with a value of &#x60;74&#x60;, all Opal resellers within 500 metres will be returned. The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {number} [inclDrawClasses1] This flag changes the list of POIs that are returned. To return Opal resellers, set this value to &#x60;74&#x60; and &#x60;type_1&#x60; to &#x60;GIS_POINT&#x60;.The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {'true'} [poisOnMapMacro] This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswCoordRequest(outputFormat: 'rapidJSON', coord: string, coordOutputFormat: 'EPSG:4326', inclFilter: number, type1: 'GIS_POINT' | 'BUS_POINT' | 'POI_POINT', radius1: number, inclDrawClasses1?: number, poisOnMapMacro?: 'true', version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CoordRequestResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tfnswCoordRequest(outputFormat, coord, coordOutputFormat, inclFilter, type1, radius1, inclDrawClasses1, poisOnMapMacro, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns a list of departures for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop. 
         * @summary Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb'} typeDm This specifies the type of results expected based on the search input in &#x60;name_dm&#x60;. By specifying &#x60;any&#x60;, locations of all types can be returned. Typically, this API call is used for a specific stop, so &#x60;stop&#x60; should be used along with a stop ID or global stop ID in &#x60;name_dm&#x60;. 
         * @param {string} nameDm This is the search term that will be used to find locations. If the combination of this value and &#x60;type_dm&#x60; results in more than one location found - or &#x60;mode&#x60; is not set to &#x60;direct&#x60;, then a list of stops and no departures will be returned. If &#x60;type_dm&#x60; is set to &#x60;stop&#x60; then this value can take a stop ID or a global stop ID. 
         * @param {'direct'} [mode] This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of &#x60;type_dm&#x60; and &#x60;name_dm&#x60; returning only a single result, otherwise a list of stops and no departures shall be returned. 
         * @param {'$USEPOINT$'} [nameKeyDm] Setting this parameter to &#x60;$USEPOINT$&#x60; enables you to request departures for a specific platform within a station. If this isn&#39;t used, then departures for all platforms at the stop specified in &#x60;name_dm&#x60; are returned. 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; value. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; value. If not specified, the current server time is used. 
         * @param {'true'} [departureMonitorMacro] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site. It is recommended this is enabled, along with the &#x60;TfNSWDM&#x60; parameter. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the departure monitor. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWDM] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. It is recommended this is enabled, along with the &#x60;departureMonitorMacro&#x60; parameter. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswDmRequest(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', typeDm: 'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb', nameDm: string, mode?: 'direct', nameKeyDm?: '$USEPOINT$', itdDate?: string, itdTime?: string, departureMonitorMacro?: 'true', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWDM?: 'true', version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DepartureMonitorResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tfnswDmRequest(outputFormat, coordOutputFormat, typeDm, nameDm, mode, nameKeyDm, itdDate, itdTime, departureMonitorMacro, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWDM, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input, while the best match will be indicated by the `isBest` value. 
         * @summary Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} nameSf This is the search term that will be used to find locations. To lookup a coordinate, set &#x60;type_sf&#x60; to &#x60;coord&#x60;, and use the following format: &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, &#x60;151.206290:-33.884080:EPSG:4326&#x60;. To lookup a stop set &#x60;type_sf&#x60; to  &#x60;stop&#x60; and enter the stop id or global stop ID. For example, &#x60;10101100&#x60; 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'stop'} [typeSf] This specifies the type of results expected in the list of returned stops. By specifying &#x60;any&#x60;, locations of all types can be returned. If you specifically know that you&#39;re searching using a coord, specify &#x60;coord&#x60;. Likewise, if you&#39;re using a stop ID or global stop ID as an input, use &#x60;stop&#x60; for more accurate results. 
         * @param {'true'} [tfNSWSF] Including this parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswStopfinderRequest(outputFormat: 'rapidJSON', nameSf: string, coordOutputFormat: 'EPSG:4326', typeSf?: 'any' | 'coord' | 'poi' | 'stop', tfNSWSF?: 'true', version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StopFinderResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tfnswStopfinderRequest(outputFormat, nameSf, coordOutputFormat, typeSf, tfNSWSF, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes the the specific path the vehicle(s) will take. 
         * @summary Provides capability to provide NSW public transport trip plan options, including walking and driving legs and real-time information.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'dep' | 'arr'} depArrMacro This value anchors the requested date time. If set to &#x60;dep&#x60;, then trips *departing after* the specified date/time *at the specified location* are included. If set to &#x60;arr&#x60;, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the &#x60;itdDate&#x60; and &#x60;itdTime&#x60; values. 
         * @param {'any' | 'coord'} typeOrigin This is the type of data specified in the &#x60;name_origin&#x60; field. The origin indicates the starting point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_origin&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_origin&#x60;. 
         * @param {string} nameOrigin This value is used to indicate the starting point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {'any' | 'coord'} typeDestination This is the type of data specified in the &#x60;name_destination&#x60; field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_destination&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_destination&#x60;. 
         * @param {string} nameDestination This value is used to indicate the finishing point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, &#x60;20160901&#x60; refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, &#x60;2215&#x60; refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server time is used. 
         * @param {number} [calcNumberOfTrips] This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
         * @param {'on'} [wheelchair] Including this parameter (regardless of its value) ensures that only wheelchair-accessible options are returned. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the trip plan. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWTR] Including this parameter enables a number of options that result in this API call operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {number} [itOptionsActive] This parameter activates the options for individual transport. If the parameter is disabled, the parameters concerning individual transport will not be taken into account. possible values are 0 and 1 
         * @param {boolean} [computeMonomodalTripBicycle] Activates the calculation of a monomodal trip, i.e., a trip that takes place exclusively with the means of transport &lt;means of transport&gt;, e.g., with bicycle. Note 1: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Note 2: If no monomodal trip with the means of transport &lt;means of transport&gt; is calculated despite the parameter, the maximum time is often set too low. The parameter MaxITTime applies to all means of transport, the parameter MaxITTime&lt;means of transport&gt;to the means of transport &lt;means of transport&gt; (e.g., MaxITTime107). These parameters are located in the [Parameters] section or are added to it. The configuration can be alternatively overridden bythe maxTime&lt;Transport means&gt; parameter. 
         * @param {number} [cycleSpeed] The value of the &lt;speed&gt; parameter is used to specify the speed of cycle travel in kilometers per hour.Note: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. If the parameter is to be specified together with a profile, the bikeProfSpeed parameter can be used.The parameter “&#39;cycleSpeed” specifies the desired real speed of the user for the bike route, which overwrites the speed in the SpeedSettings of the corresponding “bikeProfSpeed”. 
         * @param {'EASIER' | 'MODERATE' | 'MOST_DIRECT'} [bikeProfSpeed] With the parameter &#39;bikeProfSpeed&#39; a bike profile name is passed 
         * @param {number} [maxTimeBicycle] The value of the this parameter sets the maximum time to be covered by the means of cycling. The time is specified in minutes. Note: To use this parameter, the options for individual transport must be enabled with itOptionsActive&#x3D;1 
         * @param {number} [onlyITBicycle] Restricts the calculation to trips with the bikes only. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [useElevationData] If this parameter is active, the elevation data is taken into account in the trip calculation for all means of transport and output in a route description for each individual transport section. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [elevFac] This parameter specifies the maximum slope for bike routes. Roads with a slope greater than the specified?? one are avoided. The slope is specified by a factor &lt;factor&gt; whose value range is [0..100]. By default, the value of the parameter is 50 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswTripRequest2(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', depArrMacro: 'dep' | 'arr', typeOrigin: 'any' | 'coord', nameOrigin: string, typeDestination: 'any' | 'coord', nameDestination: string, itdDate?: string, itdTime?: string, calcNumberOfTrips?: number, wheelchair?: 'on', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWTR?: 'true', version?: string, itOptionsActive?: number, computeMonomodalTripBicycle?: boolean, cycleSpeed?: number, bikeProfSpeed?: 'EASIER' | 'MODERATE' | 'MOST_DIRECT', maxTimeBicycle?: number, onlyITBicycle?: number, useElevationData?: number, elevFac?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TripRequestResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tfnswTripRequest2(outputFormat, coordOutputFormat, depArrMacro, typeOrigin, nameOrigin, typeDestination, nameDestination, itdDate, itdTime, calcNumberOfTrips, wheelchair, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWTR, version, itOptionsActive, computeMonomodalTripBicycle, cycleSpeed, bikeProfSpeed, maxTimeBicycle, onlyITBicycle, useElevationData, elevFac, options);
            return async (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                console.log(basePath + localVarFetchArgs.url);
                const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options);
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop. 
         * @summary Provides capability to display all public transport service status and incident information (as published from the Service Alert Messaging System).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} [filterDateValid] This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is &#x60;DD-MM-YYYY&#x60;. For example, 12 September 2016 would be represented by &#x60;12-09-2016&#x60;. 
         * @param {number} [filterMOTType] This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * &#x60;1&#x60;: Train * &#x60;2&#x60;: Metro * &#x60;4&#x60;: Light Rail * &#x60;5&#x60;: Bus * &#x60;7&#x60;: Coach * &#x60;9&#x60;: Ferry * &#x60;11&#x60;: School Bus  To search for more than one mode, include the parameter multiple times. 
         * @param {'current'} [filterPublicationStatus] This field can be used so only current alerts are returned, and not historic alerts. 
         * @param {string} [itdLPxxSelStop] This parameter allows you to filter the returned items by its stop ID or global stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to &#x60;10111010&#x60; (stop ID) or &#x60;200060&#x60; (global stop ID). You can use the &#x60;stop_finder&#x60; API call to determine the ID for a particular stop. 
         * @param {string} [itdLPxxSelLine] This parameter allows you to filter the returned items by line number. For example, &#x60;020T1&#x60;. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [itdLPxxSelOperator] This parameter allows you to filter the returned items by operator ID. You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineDir] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:D&#x60;, (NNN: subnet, LLLLL: Route number, D: direction &#x60;H&#x60;/&#x60;R&#x60;). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [filterPNLineSub] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:E&#x60;, (NNN: subnet, LLLLL: Route number, E: supplement). You can use this parameter multiple times if you want to search for more than one line number. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswAddinfoRequest(outputFormat: 'rapidJSON', filterDateValid?: string, filterMOTType?: number, filterPublicationStatus?: 'current', itdLPxxSelStop?: string, itdLPxxSelLine?: string, itdLPxxSelOperator?: string, filterPNLineDir?: string, filterPNLineSub?: string, version?: string, options?: any) {
            return DefaultApiFp(configuration).tfnswAddinfoRequest(outputFormat, filterDateValid, filterMOTType, filterPublicationStatus, itdLPxxSelStop, itdLPxxSelLine, itdLPxxSelOperator, filterPNLineDir, filterPNLineSub, version, options)(fetch, basePath);
        },
        /**
         * This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so. 
         * @summary When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} coord The coordinate is in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, the following &#x60;coord&#x60; value can be used to search around Central Station: &#x60;151.206290:-33.884080:EPSG:4326&#x60;. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format. 
         * @param {number} inclFilter This enables \&quot;advanced filter mode\&quot; on the server, which is required to enable searching using coordinates. 
         * @param {'GIS_POINT' | 'BUS_POINT' | 'POI_POINT'} type1 This specifies the type of items to return.  * &#x60;GIS_POINT&#x60;: GIS points, including Opal resellers (see &#x60;inclDrawClasses_1&#x60;) * &#x60;BUS_POINT&#x60;: Stops/stations * &#x60;POI_POINT&#x60;: Places of interest  The &#x60;_1&#x60; suffix is an index for this particular filter. You can specify multiple filters by incrementing the suffix for each combination of &#x60;type&#x60;, &#x60;radius&#x60; and &#x60;inclDrawClasses&#x60;. For example, &#x60;type_1&#x60; means the first filter, &#x60;type_2&#x60; refers to the second, and so on. 
         * @param {number} radius1 This indicates the maximum number of metres to search in all directions from the location specified in &#x60;coord&#x60;. For example, if you use a value of &#x60;500&#x60;, a &#x60;type_1&#x60; value of &#x60;GIS_POINT&#x60; and &#x60;inclDrawClasses_1&#x60; with a value of &#x60;74&#x60;, all Opal resellers within 500 metres will be returned. The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {number} [inclDrawClasses1] This flag changes the list of POIs that are returned. To return Opal resellers, set this value to &#x60;74&#x60; and &#x60;type_1&#x60; to &#x60;GIS_POINT&#x60;.The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
         * @param {'true'} [poisOnMapMacro] This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswCoordRequest(outputFormat: 'rapidJSON', coord: string, coordOutputFormat: 'EPSG:4326', inclFilter: number, type1: 'GIS_POINT' | 'BUS_POINT' | 'POI_POINT', radius1: number, inclDrawClasses1?: number, poisOnMapMacro?: 'true', version?: string, options?: any) {
            return DefaultApiFp(configuration).tfnswCoordRequest(outputFormat, coord, coordOutputFormat, inclFilter, type1, radius1, inclDrawClasses1, poisOnMapMacro, version, options)(fetch, basePath);
        },
        /**
         * This endpoint returns a list of departures for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop. 
         * @summary Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb'} typeDm This specifies the type of results expected based on the search input in &#x60;name_dm&#x60;. By specifying &#x60;any&#x60;, locations of all types can be returned. Typically, this API call is used for a specific stop, so &#x60;stop&#x60; should be used along with a stop ID or global stop ID in &#x60;name_dm&#x60;. 
         * @param {string} nameDm This is the search term that will be used to find locations. If the combination of this value and &#x60;type_dm&#x60; results in more than one location found - or &#x60;mode&#x60; is not set to &#x60;direct&#x60;, then a list of stops and no departures will be returned. If &#x60;type_dm&#x60; is set to &#x60;stop&#x60; then this value can take a stop ID or a global stop ID. 
         * @param {'direct'} [mode] This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of &#x60;type_dm&#x60; and &#x60;name_dm&#x60; returning only a single result, otherwise a list of stops and no departures shall be returned. 
         * @param {'$USEPOINT$'} [nameKeyDm] Setting this parameter to &#x60;$USEPOINT$&#x60; enables you to request departures for a specific platform within a station. If this isn&#39;t used, then departures for all platforms at the stop specified in &#x60;name_dm&#x60; are returned. 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; value. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; value. If not specified, the current server time is used. 
         * @param {'true'} [departureMonitorMacro] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site. It is recommended this is enabled, along with the &#x60;TfNSWDM&#x60; parameter. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the departure monitor. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWDM] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. It is recommended this is enabled, along with the &#x60;departureMonitorMacro&#x60; parameter. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswDmRequest(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', typeDm: 'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb', nameDm: string, mode?: 'direct', nameKeyDm?: '$USEPOINT$', itdDate?: string, itdTime?: string, departureMonitorMacro?: 'true', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWDM?: 'true', version?: string, options?: any) {
            return DefaultApiFp(configuration).tfnswDmRequest(outputFormat, coordOutputFormat, typeDm, nameDm, mode, nameKeyDm, itdDate, itdTime, departureMonitorMacro, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWDM, version, options)(fetch, basePath);
        },
        /**
         * This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input, while the best match will be indicated by the `isBest` value. 
         * @summary Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {string} nameSf This is the search term that will be used to find locations. To lookup a coordinate, set &#x60;type_sf&#x60; to &#x60;coord&#x60;, and use the following format: &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, &#x60;151.206290:-33.884080:EPSG:4326&#x60;. To lookup a stop set &#x60;type_sf&#x60; to  &#x60;stop&#x60; and enter the stop id or global stop ID. For example, &#x60;10101100&#x60; 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'any' | 'coord' | 'poi' | 'stop'} [typeSf] This specifies the type of results expected in the list of returned stops. By specifying &#x60;any&#x60;, locations of all types can be returned. If you specifically know that you&#39;re searching using a coord, specify &#x60;coord&#x60;. Likewise, if you&#39;re using a stop ID or global stop ID as an input, use &#x60;stop&#x60; for more accurate results. 
         * @param {'true'} [tfNSWSF] Including this parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswStopfinderRequest(outputFormat: 'rapidJSON', nameSf: string, coordOutputFormat: 'EPSG:4326', typeSf?: 'any' | 'coord' | 'poi' | 'stop', tfNSWSF?: 'true', version?: string, options?: any) {
            return DefaultApiFp(configuration).tfnswStopfinderRequest(outputFormat, nameSf, coordOutputFormat, typeSf, tfNSWSF, version, options)(fetch, basePath);
        },
        /**
         * This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes the the specific path the vehicle(s) will take. 
         * @summary Provides capability to provide NSW public transport trip plan options, including walking and driving legs and real-time information.
         * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
         * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
         * @param {'dep' | 'arr'} depArrMacro This value anchors the requested date time. If set to &#x60;dep&#x60;, then trips *departing after* the specified date/time *at the specified location* are included. If set to &#x60;arr&#x60;, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the &#x60;itdDate&#x60; and &#x60;itdTime&#x60; values. 
         * @param {'any' | 'coord'} typeOrigin This is the type of data specified in the &#x60;name_origin&#x60; field. The origin indicates the starting point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_origin&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_origin&#x60;. 
         * @param {string} nameOrigin This value is used to indicate the starting point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {'any' | 'coord'} typeDestination This is the type of data specified in the &#x60;name_destination&#x60; field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_destination&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_destination&#x60;. 
         * @param {string} nameDestination This value is used to indicate the finishing point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
         * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, &#x60;20160901&#x60; refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server date is used. 
         * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, &#x60;2215&#x60; refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server time is used. 
         * @param {number} [calcNumberOfTrips] This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
         * @param {'on'} [wheelchair] Including this parameter (regardless of its value) ensures that only wheelchair-accessible options are returned. 
         * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the trip plan. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
         * @param {'1'} [exclMOT1] Excludes train services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT2] Excludes metro services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT4] Excludes light rail services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT5] Excludes bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT7] Excludes coach services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT9] Excludes ferry services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'1'} [exclMOT11] Excludes school bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
         * @param {'true'} [tfNSWTR] Including this parameter enables a number of options that result in this API call operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. 
         * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
         * @param {number} [itOptionsActive] This parameter activates the options for individual transport. If the parameter is disabled, the parameters concerning individual transport will not be taken into account. possible values are 0 and 1 
         * @param {boolean} [computeMonomodalTripBicycle] Activates the calculation of a monomodal trip, i.e., a trip that takes place exclusively with the means of transport &lt;means of transport&gt;, e.g., with bicycle. Note 1: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Note 2: If no monomodal trip with the means of transport &lt;means of transport&gt; is calculated despite the parameter, the maximum time is often set too low. The parameter MaxITTime applies to all means of transport, the parameter MaxITTime&lt;means of transport&gt;to the means of transport &lt;means of transport&gt; (e.g., MaxITTime107). These parameters are located in the [Parameters] section or are added to it. The configuration can be alternatively overridden bythe maxTime&lt;Transport means&gt; parameter. 
         * @param {number} [cycleSpeed] The value of the &lt;speed&gt; parameter is used to specify the speed of cycle travel in kilometers per hour.Note: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. If the parameter is to be specified together with a profile, the bikeProfSpeed parameter can be used.The parameter “&#39;cycleSpeed” specifies the desired real speed of the user for the bike route, which overwrites the speed in the SpeedSettings of the corresponding “bikeProfSpeed”. 
         * @param {'EASIER' | 'MODERATE' | 'MOST_DIRECT'} [bikeProfSpeed] With the parameter &#39;bikeProfSpeed&#39; a bike profile name is passed 
         * @param {number} [maxTimeBicycle] The value of the this parameter sets the maximum time to be covered by the means of cycling. The time is specified in minutes. Note: To use this parameter, the options for individual transport must be enabled with itOptionsActive&#x3D;1 
         * @param {number} [onlyITBicycle] Restricts the calculation to trips with the bikes only. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [useElevationData] If this parameter is active, the elevation data is taken into account in the trip calculation for all means of transport and output in a route description for each individual transport section. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
         * @param {number} [elevFac] This parameter specifies the maximum slope for bike routes. Roads with a slope greater than the specified?? one are avoided. The slope is specified by a factor &lt;factor&gt; whose value range is [0..100]. By default, the value of the parameter is 50 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tfnswTripRequest2(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', depArrMacro: 'dep' | 'arr', typeOrigin: 'any' | 'coord', nameOrigin: string, typeDestination: 'any' | 'coord', nameDestination: string, itdDate?: string, itdTime?: string, calcNumberOfTrips?: number, wheelchair?: 'on', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWTR?: 'true', version?: string, itOptionsActive?: number, computeMonomodalTripBicycle?: boolean, cycleSpeed?: number, bikeProfSpeed?: 'EASIER' | 'MODERATE' | 'MOST_DIRECT', maxTimeBicycle?: number, onlyITBicycle?: number, useElevationData?: number, elevFac?: number, options?: any) {
            return DefaultApiFp(configuration).tfnswTripRequest2(outputFormat, coordOutputFormat, depArrMacro, typeOrigin, nameOrigin, typeDestination, nameDestination, itdDate, itdTime, calcNumberOfTrips, wheelchair, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWTR, version, itOptionsActive, computeMonomodalTripBicycle, cycleSpeed, bikeProfSpeed, maxTimeBicycle, onlyITBicycle, useElevationData, elevFac, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * This endpoint returns a list of service alerts or additional information about travelling on the public transport network. This list can be filtered by date, route type, route, operator or stop. 
     * @summary Provides capability to display all public transport service status and incident information (as published from the Service Alert Messaging System).
     * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
     * @param {string} [filterDateValid] This parameter allows you to filter the returned items that are only valid on the specified date. The format of this field is &#x60;DD-MM-YYYY&#x60;. For example, 12 September 2016 would be represented by &#x60;12-09-2016&#x60;. 
     * @param {number} [filterMOTType] This parameter allows you to filter the returned items by the modes of transport they affected. Available modes include:  * &#x60;1&#x60;: Train * &#x60;2&#x60;: Metro * &#x60;4&#x60;: Light Rail * &#x60;5&#x60;: Bus * &#x60;7&#x60;: Coach * &#x60;9&#x60;: Ferry * &#x60;11&#x60;: School Bus  To search for more than one mode, include the parameter multiple times. 
     * @param {'current'} [filterPublicationStatus] This field can be used so only current alerts are returned, and not historic alerts. 
     * @param {string} [itdLPxxSelStop] This parameter allows you to filter the returned items by its stop ID or global stop ID. For example, to retrieve items that are only relevant to Central Station, you would set this value to &#x60;10111010&#x60; (stop ID) or &#x60;200060&#x60; (global stop ID). You can use the &#x60;stop_finder&#x60; API call to determine the ID for a particular stop. 
     * @param {string} [itdLPxxSelLine] This parameter allows you to filter the returned items by line number. For example, &#x60;020T1&#x60;. You can use this parameter multiple times if you want to search for more than one line number. 
     * @param {string} [itdLPxxSelOperator] This parameter allows you to filter the returned items by operator ID. You can use this parameter multiple times if you want to search for more than one line number. 
     * @param {string} [filterPNLineDir] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:D&#x60;, (NNN: subnet, LLLLL: Route number, D: direction &#x60;H&#x60;/&#x60;R&#x60;). You can use this parameter multiple times if you want to search for more than one line number. 
     * @param {string} [filterPNLineSub] This parameter allows you to filter the returned items by specific routes. The route is provided in the format &#x60;NNN:LLLLL:E&#x60;, (NNN: subnet, LLLLL: Route number, E: supplement). You can use this parameter multiple times if you want to search for more than one line number. 
     * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tfnswAddinfoRequest(outputFormat: 'rapidJSON', filterDateValid?: string, filterMOTType?: number, filterPublicationStatus?: 'current', itdLPxxSelStop?: string, itdLPxxSelLine?: string, itdLPxxSelOperator?: string, filterPNLineDir?: string, filterPNLineSub?: string, version?: string, options?: any) {
        return DefaultApiFp(this.configuration).tfnswAddinfoRequest(outputFormat, filterDateValid, filterMOTType, filterPublicationStatus, itdLPxxSelStop, itdLPxxSelLine, itdLPxxSelOperator, filterPNLineDir, filterPNLineSub, version, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns places of interest based on the given coordinate and a radius. The types of POIs can be controlled, so if, for example, you only want Opal resellers returned, you can do so. 
     * @summary When given a specific geographical location, this API finds public transport stops, stations, wharfs and points of interest around that location.
     * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
     * @param {string} coord The coordinate is in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, the following &#x60;coord&#x60; value can be used to search around Central Station: &#x60;151.206290:-33.884080:EPSG:4326&#x60;. 
     * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format. 
     * @param {number} inclFilter This enables \&quot;advanced filter mode\&quot; on the server, which is required to enable searching using coordinates. 
     * @param {'GIS_POINT' | 'BUS_POINT' | 'POI_POINT'} type1 This specifies the type of items to return.  * &#x60;GIS_POINT&#x60;: GIS points, including Opal resellers (see &#x60;inclDrawClasses_1&#x60;) * &#x60;BUS_POINT&#x60;: Stops/stations * &#x60;POI_POINT&#x60;: Places of interest  The &#x60;_1&#x60; suffix is an index for this particular filter. You can specify multiple filters by incrementing the suffix for each combination of &#x60;type&#x60;, &#x60;radius&#x60; and &#x60;inclDrawClasses&#x60;. For example, &#x60;type_1&#x60; means the first filter, &#x60;type_2&#x60; refers to the second, and so on. 
     * @param {number} radius1 This indicates the maximum number of metres to search in all directions from the location specified in &#x60;coord&#x60;. For example, if you use a value of &#x60;500&#x60;, a &#x60;type_1&#x60; value of &#x60;GIS_POINT&#x60; and &#x60;inclDrawClasses_1&#x60; with a value of &#x60;74&#x60;, all Opal resellers within 500 metres will be returned. The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
     * @param {number} [inclDrawClasses1] This flag changes the list of POIs that are returned. To return Opal resellers, set this value to &#x60;74&#x60; and &#x60;type_1&#x60; to &#x60;GIS_POINT&#x60;.The suffix of &#x60;_1&#x60; indicates this radius value corresponds to the &#x60;type_1&#x60; value. If multiple filters are to be included, the appropriate suffix should be updated accordingly. 
     * @param {'true'} [poisOnMapMacro] This field indicates how the returned data is to be used, which in turn impacts whether or not certain locations are returned. 
     * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tfnswCoordRequest(outputFormat: 'rapidJSON', coord: string, coordOutputFormat: 'EPSG:4326', inclFilter: number, type1: 'GIS_POINT' | 'BUS_POINT' | 'POI_POINT', radius1: number, inclDrawClasses1?: number, poisOnMapMacro?: 'true', version?: string, options?: any) {
        return DefaultApiFp(this.configuration).tfnswCoordRequest(outputFormat, coord, coordOutputFormat, inclFilter, type1, radius1, inclDrawClasses1, poisOnMapMacro, version, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns a list of departures for a given location based on the date and time specified. This data can be used to display a \"upcoming departures\" board for a stop. 
     * @summary Provides capability to provide NSW public transport departure information from a stop, station or wharf including real-time.
     * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
     * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
     * @param {'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb'} typeDm This specifies the type of results expected based on the search input in &#x60;name_dm&#x60;. By specifying &#x60;any&#x60;, locations of all types can be returned. Typically, this API call is used for a specific stop, so &#x60;stop&#x60; should be used along with a stop ID or global stop ID in &#x60;name_dm&#x60;. 
     * @param {string} nameDm This is the search term that will be used to find locations. If the combination of this value and &#x60;type_dm&#x60; results in more than one location found - or &#x60;mode&#x60; is not set to &#x60;direct&#x60;, then a list of stops and no departures will be returned. If &#x60;type_dm&#x60; is set to &#x60;stop&#x60; then this value can take a stop ID or a global stop ID. 
     * @param {'direct'} [mode] This allows the departure board to display directly without going through the stop verification process. Use this when the stop is known. This relies on the given combination of &#x60;type_dm&#x60; and &#x60;name_dm&#x60; returning only a single result, otherwise a list of stops and no departures shall be returned. 
     * @param {'$USEPOINT$'} [nameKeyDm] Setting this parameter to &#x60;$USEPOINT$&#x60; enables you to request departures for a specific platform within a station. If this isn&#39;t used, then departures for all platforms at the stop specified in &#x60;name_dm&#x60; are returned. 
     * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, 20160901 refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; value. If not specified, the current server date is used. 
     * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, 2215 refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; value. If not specified, the current server time is used. 
     * @param {'true'} [departureMonitorMacro] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site. It is recommended this is enabled, along with the &#x60;TfNSWDM&#x60; parameter. 
     * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the departure monitor. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
     * @param {'1'} [exclMOT1] Excludes train services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT2] Excludes metro services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT4] Excludes light rail services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT5] Excludes bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT7] Excludes coach services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT9] Excludes ferry services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT11] Excludes school bus services from the departure monitor.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'true'} [tfNSWDM] Including this parameter enables a number of options that result in the departure monitor operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. It is recommended this is enabled, along with the &#x60;departureMonitorMacro&#x60; parameter. 
     * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tfnswDmRequest(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', typeDm: 'any' | 'coord' | 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'suburb', nameDm: string, mode?: 'direct', nameKeyDm?: '$USEPOINT$', itdDate?: string, itdTime?: string, departureMonitorMacro?: 'true', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWDM?: 'true', version?: string, options?: any) {
        return DefaultApiFp(this.configuration).tfnswDmRequest(outputFormat, coordOutputFormat, typeDm, nameDm, mode, nameKeyDm, itdDate, itdTime, departureMonitorMacro, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWDM, version, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns info about stops that match the search criteria. Matches can be sorted on `matchQuality` to determine the best matches for the given input, while the best match will be indicated by the `isBest` value. 
     * @summary Provides capability to return all NSW public transport stop, station, wharf, points of interest and known addresses to be used for auto-suggest/auto-complete (to be used with the Trip planner and Departure board APIs).
     * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
     * @param {string} nameSf This is the search term that will be used to find locations. To lookup a coordinate, set &#x60;type_sf&#x60; to &#x60;coord&#x60;, and use the following format: &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). For example, &#x60;151.206290:-33.884080:EPSG:4326&#x60;. To lookup a stop set &#x60;type_sf&#x60; to  &#x60;stop&#x60; and enter the stop id or global stop ID. For example, &#x60;10101100&#x60; 
     * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
     * @param {'any' | 'coord' | 'poi' | 'stop'} [typeSf] This specifies the type of results expected in the list of returned stops. By specifying &#x60;any&#x60;, locations of all types can be returned. If you specifically know that you&#39;re searching using a coord, specify &#x60;coord&#x60;. Likewise, if you&#39;re using a stop ID or global stop ID as an input, use &#x60;stop&#x60; for more accurate results. 
     * @param {'true'} [tfNSWSF] Including this parameter enables a number of options that result in the stop finder operating in the same way as the Transport for NSW Trip Planner web site. 
     * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tfnswStopfinderRequest(outputFormat: 'rapidJSON', nameSf: string, coordOutputFormat: 'EPSG:4326', typeSf?: 'any' | 'coord' | 'poi' | 'stop', tfNSWSF?: 'true', version?: string, options?: any) {
        return DefaultApiFp(this.configuration).tfnswStopfinderRequest(outputFormat, nameSf, coordOutputFormat, typeSf, tfNSWSF, version, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint is used to find a list of journeys between two locations at the specified date and time. For example, if the user is at the Airport and wants to get to Manly using public transport but isn't sure how exactly, this call will tell them exactly which train, bus, ferry or light rail to catch, and between which stops. It is extremely detailed, and includes the the specific path the vehicle(s) will take. 
     * @summary Provides capability to provide NSW public transport trip plan options, including walking and driving legs and real-time information.
     * @param {'rapidJSON'} outputFormat Used to set the response data type. This documentation only covers responses that use the JSON format. Setting the &#x60;outputFormat&#x60; value to &#x60;rapidJSON&#x60; is required to enable JSON output. 
     * @param {'EPSG:4326'} coordOutputFormat This specifies the format the coordinates are returned in. While other variations are available, the &#x60;EPSG:4326&#x60; format will return the widely-used format.
     * @param {'dep' | 'arr'} depArrMacro This value anchors the requested date time. If set to &#x60;dep&#x60;, then trips *departing after* the specified date/time *at the specified location* are included. If set to &#x60;arr&#x60;, then trips *arriving before* the specified time *at its destination stop* are included. Works in conjunctions with the &#x60;itdDate&#x60; and &#x60;itdTime&#x60; values. 
     * @param {'any' | 'coord'} typeOrigin This is the type of data specified in the &#x60;name_origin&#x60; field. The origin indicates the starting point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_origin&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_origin&#x60;. 
     * @param {string} nameOrigin This value is used to indicate the starting point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
     * @param {'any' | 'coord'} typeDestination This is the type of data specified in the &#x60;name_destination&#x60; field. The origin indicates the finishing point when searching for journeys. The best way to use the trip planner is to use use &#x60;any&#x60; for this field then specify a valid location ID in &#x60;type_destination&#x60;, or to use &#x60;coord&#x60; in this field and a correctly formatted coordinate in &#x60;type_destination&#x60;. 
     * @param {string} nameDestination This value is used to indicate the finishing point when searching for journeys. This value can be one of three things: A valid location/stop ID (for example, &#x60;10101100&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;). A valid global stop ID (for example, &#x60;200060&#x60; indicates Central Station - this can be determined using &#x60;stop_finder&#x60;) Coordinates in the format &#x60;LONGITUDE:LATITUDE:EPSG:4326&#x60; (Note that longitude is first). 
     * @param {string} [itdDate] The reference date used when searching trips, in &#x60;YYYYMMDD&#x60; format. For instance, &#x60;20160901&#x60; refers to 1 September 2016. Works in conjunction with the &#x60;itdTime&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server date is used. 
     * @param {string} [itdTime] The reference time used when searching trips, in &#x60;HHMM&#x60; 24-hour format. For instance, &#x60;2215&#x60; refers to 10:15 PM. | Works in conjunction with the &#x60;itdDate&#x60; and &#x60;depArrMacro&#x60; values. If not specified, the current server time is used. 
     * @param {number} [calcNumberOfTrips] This parameter indicates the maximum number of trips to returned. Fewer trips may be returned anyway, depending on the available public transport services. 
     * @param {'on'} [wheelchair] Including this parameter (regardless of its value) ensures that only wheelchair-accessible options are returned. 
     * @param {'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11'} [excludedMeans] This parameter which means of transport to exclude from the trip plan. To exclude one means, select one of the following: &#x60;1&#x60; &#x3D; train, &#x60;2&#x60; &#x3D; metro, &#x60;4&#x60; &#x3D; light rail, &#x60;5&#x60; &#x3D; bus, &#x60;7&#x60; &#x3D; coach, &#x60;9&#x60; &#x3D; ferry, &#x60;11&#x60; &#x3D; school bus. &#x60;checkbox&#x60; allows you to exclude more than one means of transport when used in conjunction with the &#x60;exclMOT_&lt;ID&gt;&#x60; parameters. 
     * @param {'1'} [exclMOT1] Excludes train services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT2] Excludes metro services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT4] Excludes light rail services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT5] Excludes bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT7] Excludes coach services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT9] Excludes ferry services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'1'} [exclMOT11] Excludes school bus services from the trip plan.  Must be used in conjunction with &#x60;excludedMeans&#x3D;checkbox&#x60; 
     * @param {'true'} [tfNSWTR] Including this parameter enables a number of options that result in this API call operating in the same way as the Transport for NSW Trip Planner web site, including enabling real-time data. 
     * @param {string} [version] Indicates which version of the API the caller is expecting for both request and response data. Note that if this version differs from the version listed above then the returned data may not be as expected. 
     * @param {number} [itOptionsActive] This parameter activates the options for individual transport. If the parameter is disabled, the parameters concerning individual transport will not be taken into account. possible values are 0 and 1 
     * @param {boolean} [computeMonomodalTripBicycle] Activates the calculation of a monomodal trip, i.e., a trip that takes place exclusively with the means of transport &lt;means of transport&gt;, e.g., with bicycle. Note 1: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Note 2: If no monomodal trip with the means of transport &lt;means of transport&gt; is calculated despite the parameter, the maximum time is often set too low. The parameter MaxITTime applies to all means of transport, the parameter MaxITTime&lt;means of transport&gt;to the means of transport &lt;means of transport&gt; (e.g., MaxITTime107). These parameters are located in the [Parameters] section or are added to it. The configuration can be alternatively overridden bythe maxTime&lt;Transport means&gt; parameter. 
     * @param {number} [cycleSpeed] The value of the &lt;speed&gt; parameter is used to specify the speed of cycle travel in kilometers per hour.Note: In order to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. If the parameter is to be specified together with a profile, the bikeProfSpeed parameter can be used.The parameter “&#39;cycleSpeed” specifies the desired real speed of the user for the bike route, which overwrites the speed in the SpeedSettings of the corresponding “bikeProfSpeed”. 
     * @param {'EASIER' | 'MODERATE' | 'MOST_DIRECT'} [bikeProfSpeed] With the parameter &#39;bikeProfSpeed&#39; a bike profile name is passed 
     * @param {number} [maxTimeBicycle] The value of the this parameter sets the maximum time to be covered by the means of cycling. The time is specified in minutes. Note: To use this parameter, the options for individual transport must be enabled with itOptionsActive&#x3D;1 
     * @param {number} [onlyITBicycle] Restricts the calculation to trips with the bikes only. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
     * @param {number} [useElevationData] If this parameter is active, the elevation data is taken into account in the trip calculation for all means of transport and output in a route description for each individual transport section. Note: To be able to use this parameter, the options for individual transport must be activated with itOptionsActive&#x3D;1. Possible values are 1, true, on 
     * @param {number} [elevFac] This parameter specifies the maximum slope for bike routes. Roads with a slope greater than the specified?? one are avoided. The slope is specified by a factor &lt;factor&gt; whose value range is [0..100]. By default, the value of the parameter is 50 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tfnswTripRequest2(outputFormat: 'rapidJSON', coordOutputFormat: 'EPSG:4326', depArrMacro: 'dep' | 'arr', typeOrigin: 'any' | 'coord', nameOrigin: string, typeDestination: 'any' | 'coord', nameDestination: string, itdDate?: string, itdTime?: string, calcNumberOfTrips?: number, wheelchair?: 'on', excludedMeans?: 'checkbox' | '1' | '2' | '4' | '5' | '7' | '9' | '11', exclMOT1?: '1', exclMOT2?: '1', exclMOT4?: '1', exclMOT5?: '1', exclMOT7?: '1', exclMOT9?: '1', exclMOT11?: '1', tfNSWTR?: 'true', version?: string, itOptionsActive?: number, computeMonomodalTripBicycle?: boolean, cycleSpeed?: number, bikeProfSpeed?: 'EASIER' | 'MODERATE' | 'MOST_DIRECT', maxTimeBicycle?: number, onlyITBicycle?: number, useElevationData?: number, elevFac?: number, options?: any) {
        return DefaultApiFp(this.configuration).tfnswTripRequest2(outputFormat, coordOutputFormat, depArrMacro, typeOrigin, nameOrigin, typeDestination, nameDestination, itdDate, itdTime, calcNumberOfTrips, wheelchair, excludedMeans, exclMOT1, exclMOT2, exclMOT4, exclMOT5, exclMOT7, exclMOT9, exclMOT11, tfNSWTR, version, itOptionsActive, computeMonomodalTripBicycle, cycleSpeed, bikeProfSpeed, maxTimeBicycle, onlyITBicycle, useElevationData, elevFac, options)(this.fetch, this.basePath);
    }

}

